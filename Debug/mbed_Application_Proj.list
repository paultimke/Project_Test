
mbed_Application_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003460  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080035e8  080035e8  000135e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003634  08003634  00013634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003638  08003638  00013638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000304  20000000  0800363c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020304  2**0
                  CONTENTS
  7 .bss          0000001c  20000304  20000304  00020304  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000320  20000320  00020304  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008657  00000000  00000000  00020334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001e81  00000000  00000000  0002898b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a08  00000000  00000000  0002a810  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008e0  00000000  00000000  0002b218  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000043b6  00000000  00000000  0002baf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000026c4  00000000  00000000  0002feae  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00032572  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000027c4  00000000  00000000  000325f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000304 	.word	0x20000304
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080035d0 	.word	0x080035d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000308 	.word	0x20000308
 80001c4:	080035d0 	.word	0x080035d0

080001c8 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d6:	f023 020f 	bic.w	r2, r3, #15
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	431a      	orrs	r2, r3
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80001e2:	bf00      	nop
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr

080001ee <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80001ee:	b480      	push	{r7}
 80001f0:	b083      	sub	sp, #12
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	689b      	ldr	r3, [r3, #8]
 80001fa:	f003 0301 	and.w	r3, r3, #1
 80001fe:	2b01      	cmp	r3, #1
 8000200:	bf0c      	ite	eq
 8000202:	2301      	moveq	r3, #1
 8000204:	2300      	movne	r3, #0
 8000206:	b2db      	uxtb	r3, r3
}
 8000208:	4618      	mov	r0, r3
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8000214:	b590      	push	{r4, r7, lr}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800021e:	2300      	movs	r3, #0
 8000220:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8000222:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000226:	f7ff ffe2 	bl	80001ee <LL_ADC_IsEnabled>
 800022a:	4604      	mov	r4, r0
 800022c:	4817      	ldr	r0, [pc, #92]	; (800028c <LL_ADC_CommonInit+0x78>)
 800022e:	f7ff ffde 	bl	80001ee <LL_ADC_IsEnabled>
 8000232:	4603      	mov	r3, r0
 8000234:	4323      	orrs	r3, r4
 8000236:	2b00      	cmp	r3, #0
 8000238:	d120      	bne.n	800027c <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d012      	beq.n	8000268 <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	689a      	ldr	r2, [r3, #8]
 8000246:	4b12      	ldr	r3, [pc, #72]	; (8000290 <LL_ADC_CommonInit+0x7c>)
 8000248:	4013      	ands	r3, r2
 800024a:	683a      	ldr	r2, [r7, #0]
 800024c:	6811      	ldr	r1, [r2, #0]
 800024e:	683a      	ldr	r2, [r7, #0]
 8000250:	6852      	ldr	r2, [r2, #4]
 8000252:	4311      	orrs	r1, r2
 8000254:	683a      	ldr	r2, [r7, #0]
 8000256:	6892      	ldr	r2, [r2, #8]
 8000258:	4311      	orrs	r1, r2
 800025a:	683a      	ldr	r2, [r7, #0]
 800025c:	68d2      	ldr	r2, [r2, #12]
 800025e:	430a      	orrs	r2, r1
 8000260:	431a      	orrs	r2, r3
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	e00b      	b.n	8000280 <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	689a      	ldr	r2, [r3, #8]
 800026c:	4b08      	ldr	r3, [pc, #32]	; (8000290 <LL_ADC_CommonInit+0x7c>)
 800026e:	4013      	ands	r3, r2
 8000270:	683a      	ldr	r2, [r7, #0]
 8000272:	6812      	ldr	r2, [r2, #0]
 8000274:	431a      	orrs	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	e001      	b.n	8000280 <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800027c:	2301      	movs	r3, #1
 800027e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000280:	7bfb      	ldrb	r3, [r7, #15]
}
 8000282:	4618      	mov	r0, r3
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	bd90      	pop	{r4, r7, pc}
 800028a:	bf00      	nop
 800028c:	50000100 	.word	0x50000100
 8000290:	fffc30e0 	.word	0xfffc30e0

08000294 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800029e:	2300      	movs	r3, #0
 80002a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f7ff ffa3 	bl	80001ee <LL_ADC_IsEnabled>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d111      	bne.n	80002d2 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	68db      	ldr	r3, [r3, #12]
 80002b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80002b6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80002ba:	683a      	ldr	r2, [r7, #0]
 80002bc:	6811      	ldr	r1, [r2, #0]
 80002be:	683a      	ldr	r2, [r7, #0]
 80002c0:	6852      	ldr	r2, [r2, #4]
 80002c2:	4311      	orrs	r1, r2
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	6892      	ldr	r2, [r2, #8]
 80002c8:	430a      	orrs	r2, r1
 80002ca:	431a      	orrs	r2, r3
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	e001      	b.n	80002d6 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80002d2:	2301      	movs	r3, #1
 80002d4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80002d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002d8:	4618      	mov	r0, r3
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80002ea:	2300      	movs	r3, #0
 80002ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80002ee:	6878      	ldr	r0, [r7, #4]
 80002f0:	f7ff ff7d 	bl	80001ee <LL_ADC_IsEnabled>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d132      	bne.n	8000360 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d015      	beq.n	800032e <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	68da      	ldr	r2, [r3, #12]
 8000306:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <LL_ADC_REG_Init+0x90>)
 8000308:	4013      	ands	r3, r2
 800030a:	683a      	ldr	r2, [r7, #0]
 800030c:	6811      	ldr	r1, [r2, #0]
 800030e:	683a      	ldr	r2, [r7, #0]
 8000310:	6892      	ldr	r2, [r2, #8]
 8000312:	4311      	orrs	r1, r2
 8000314:	683a      	ldr	r2, [r7, #0]
 8000316:	68d2      	ldr	r2, [r2, #12]
 8000318:	4311      	orrs	r1, r2
 800031a:	683a      	ldr	r2, [r7, #0]
 800031c:	6912      	ldr	r2, [r2, #16]
 800031e:	4311      	orrs	r1, r2
 8000320:	683a      	ldr	r2, [r7, #0]
 8000322:	6952      	ldr	r2, [r2, #20]
 8000324:	430a      	orrs	r2, r1
 8000326:	431a      	orrs	r2, r3
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	e011      	b.n	8000352 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	68da      	ldr	r2, [r3, #12]
 8000332:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <LL_ADC_REG_Init+0x90>)
 8000334:	4013      	ands	r3, r2
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	6811      	ldr	r1, [r2, #0]
 800033a:	683a      	ldr	r2, [r7, #0]
 800033c:	68d2      	ldr	r2, [r2, #12]
 800033e:	4311      	orrs	r1, r2
 8000340:	683a      	ldr	r2, [r7, #0]
 8000342:	6912      	ldr	r2, [r2, #16]
 8000344:	4311      	orrs	r1, r2
 8000346:	683a      	ldr	r2, [r7, #0]
 8000348:	6952      	ldr	r2, [r2, #20]
 800034a:	430a      	orrs	r2, r1
 800034c:	431a      	orrs	r2, r3
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	4619      	mov	r1, r3
 8000358:	6878      	ldr	r0, [r7, #4]
 800035a:	f7ff ff35 	bl	80001c8 <LL_ADC_REG_SetSequencerLength>
 800035e:	e001      	b.n	8000364 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8000360:	2301      	movs	r3, #1
 8000362:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000364:	7bfb      	ldrb	r3, [r7, #15]
}
 8000366:	4618      	mov	r0, r3
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	fff0c03c 	.word	0xfff0c03c

08000374 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800037c:	4905      	ldr	r1, [pc, #20]	; (8000394 <LL_EXTI_EnableIT_0_31+0x20>)
 800037e:	4b05      	ldr	r3, [pc, #20]	; (8000394 <LL_EXTI_EnableIT_0_31+0x20>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4313      	orrs	r3, r2
 8000386:	600b      	str	r3, [r1, #0]
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	40010400 	.word	0x40010400

08000398 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80003a0:	4905      	ldr	r1, [pc, #20]	; (80003b8 <LL_EXTI_EnableIT_32_63+0x20>)
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <LL_EXTI_EnableIT_32_63+0x20>)
 80003a4:	6a1a      	ldr	r2, [r3, #32]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4313      	orrs	r3, r2
 80003aa:	620b      	str	r3, [r1, #32]
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr
 80003b8:	40010400 	.word	0x40010400

080003bc <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80003c4:	4906      	ldr	r1, [pc, #24]	; (80003e0 <LL_EXTI_DisableIT_0_31+0x24>)
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <LL_EXTI_DisableIT_0_31+0x24>)
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	43db      	mvns	r3, r3
 80003ce:	4013      	ands	r3, r2
 80003d0:	600b      	str	r3, [r1, #0]
}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40010400 	.word	0x40010400

080003e4 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80003ec:	4906      	ldr	r1, [pc, #24]	; (8000408 <LL_EXTI_DisableIT_32_63+0x24>)
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <LL_EXTI_DisableIT_32_63+0x24>)
 80003f0:	6a1a      	ldr	r2, [r3, #32]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	43db      	mvns	r3, r3
 80003f6:	4013      	ands	r3, r2
 80003f8:	620b      	str	r3, [r1, #32]
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40010400 	.word	0x40010400

0800040c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000414:	4905      	ldr	r1, [pc, #20]	; (800042c <LL_EXTI_EnableEvent_0_31+0x20>)
 8000416:	4b05      	ldr	r3, [pc, #20]	; (800042c <LL_EXTI_EnableEvent_0_31+0x20>)
 8000418:	685a      	ldr	r2, [r3, #4]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4313      	orrs	r3, r2
 800041e:	604b      	str	r3, [r1, #4]

}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	40010400 	.word	0x40010400

08000430 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000438:	4905      	ldr	r1, [pc, #20]	; (8000450 <LL_EXTI_EnableEvent_32_63+0x20>)
 800043a:	4b05      	ldr	r3, [pc, #20]	; (8000450 <LL_EXTI_EnableEvent_32_63+0x20>)
 800043c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	40010400 	.word	0x40010400

08000454 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800045c:	4906      	ldr	r1, [pc, #24]	; (8000478 <LL_EXTI_DisableEvent_0_31+0x24>)
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000460:	685a      	ldr	r2, [r3, #4]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	43db      	mvns	r3, r3
 8000466:	4013      	ands	r3, r2
 8000468:	604b      	str	r3, [r1, #4]
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40010400 	.word	0x40010400

0800047c <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000484:	4906      	ldr	r1, [pc, #24]	; (80004a0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000488:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	43db      	mvns	r3, r3
 800048e:	4013      	ands	r3, r2
 8000490:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40010400 	.word	0x40010400

080004a4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80004ac:	4905      	ldr	r1, [pc, #20]	; (80004c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80004ae:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80004b0:	689a      	ldr	r2, [r3, #8]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4313      	orrs	r3, r2
 80004b6:	608b      	str	r3, [r1, #8]

}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	40010400 	.word	0x40010400

080004c8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80004d0:	4905      	ldr	r1, [pc, #20]	; (80004e8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80004d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4313      	orrs	r3, r2
 80004da:	628b      	str	r3, [r1, #40]	; 0x28
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	40010400 	.word	0x40010400

080004ec <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80004f4:	4906      	ldr	r1, [pc, #24]	; (8000510 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80004f8:	689a      	ldr	r2, [r3, #8]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	43db      	mvns	r3, r3
 80004fe:	4013      	ands	r3, r2
 8000500:	608b      	str	r3, [r1, #8]

}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40010400 	.word	0x40010400

08000514 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800051c:	4906      	ldr	r1, [pc, #24]	; (8000538 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	43db      	mvns	r3, r3
 8000526:	4013      	ands	r3, r2
 8000528:	628b      	str	r3, [r1, #40]	; 0x28
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40010400 	.word	0x40010400

0800053c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000544:	4905      	ldr	r1, [pc, #20]	; (800055c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000546:	4b05      	ldr	r3, [pc, #20]	; (800055c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000548:	68da      	ldr	r2, [r3, #12]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4313      	orrs	r3, r2
 800054e:	60cb      	str	r3, [r1, #12]
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	40010400 	.word	0x40010400

08000560 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000568:	4905      	ldr	r1, [pc, #20]	; (8000580 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800056c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40010400 	.word	0x40010400

08000584 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800058c:	4906      	ldr	r1, [pc, #24]	; (80005a8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000590:	68da      	ldr	r2, [r3, #12]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	43db      	mvns	r3, r3
 8000596:	4013      	ands	r3, r2
 8000598:	60cb      	str	r3, [r1, #12]
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40010400 	.word	0x40010400

080005ac <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80005b4:	4906      	ldr	r1, [pc, #24]	; (80005d0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80005b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	43db      	mvns	r3, r3
 80005be:	4013      	ands	r3, r2
 80005c0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40010400 	.word	0x40010400

080005d4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80005dc:	2300      	movs	r3, #0
 80005de:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	7a1b      	ldrb	r3, [r3, #8]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	f000 80c1 	beq.w	800076c <LL_EXTI_Init+0x198>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d05b      	beq.n	80006aa <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7a5b      	ldrb	r3, [r3, #9]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d00e      	beq.n	8000618 <LL_EXTI_Init+0x44>
 80005fa:	2b02      	cmp	r3, #2
 80005fc:	d017      	beq.n	800062e <LL_EXTI_Init+0x5a>
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d120      	bne.n	8000644 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ff24 	bl	8000454 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff feaf 	bl	8000374 <LL_EXTI_EnableIT_0_31>
          break;
 8000616:	e018      	b.n	800064a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fecd 	bl	80003bc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff fef0 	bl	800040c <LL_EXTI_EnableEvent_0_31>
          break;
 800062c:	e00d      	b.n	800064a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fe9e 	bl	8000374 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff fee5 	bl	800040c <LL_EXTI_EnableEvent_0_31>
          break;
 8000642:	e002      	b.n	800064a <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8000644:	2301      	movs	r3, #1
 8000646:	73fb      	strb	r3, [r7, #15]
          break;
 8000648:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	7a9b      	ldrb	r3, [r3, #10]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d02b      	beq.n	80006aa <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	7a9b      	ldrb	r3, [r3, #10]
 8000656:	2b02      	cmp	r3, #2
 8000658:	d00e      	beq.n	8000678 <LL_EXTI_Init+0xa4>
 800065a:	2b03      	cmp	r3, #3
 800065c:	d017      	beq.n	800068e <LL_EXTI_Init+0xba>
 800065e:	2b01      	cmp	r3, #1
 8000660:	d120      	bne.n	80006a4 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ff8c 	bl	8000584 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff17 	bl	80004a4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000676:	e018      	b.n	80006aa <LL_EXTI_Init+0xd6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff35 	bl	80004ec <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ff58 	bl	800053c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800068c:	e00d      	b.n	80006aa <LL_EXTI_Init+0xd6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ff06 	bl	80004a4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff4d 	bl	800053c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80006a2:	e002      	b.n	80006aa <LL_EXTI_Init+0xd6>
          default:
            status = ERROR;
 80006a4:	2301      	movs	r3, #1
 80006a6:	73fb      	strb	r3, [r7, #15]
            break;
 80006a8:	bf00      	nop
        }
      }
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d070      	beq.n	8000794 <LL_EXTI_Init+0x1c0>
    {
      switch (EXTI_InitStruct->Mode)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7a5b      	ldrb	r3, [r3, #9]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d00e      	beq.n	80006d8 <LL_EXTI_Init+0x104>
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d017      	beq.n	80006ee <LL_EXTI_Init+0x11a>
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d120      	bne.n	8000704 <LL_EXTI_Init+0x130>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff fed8 	bl	800047c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fe61 	bl	8000398 <LL_EXTI_EnableIT_32_63>
          break;
 80006d6:	e018      	b.n	800070a <LL_EXTI_Init+0x136>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fe81 	bl	80003e4 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fea2 	bl	8000430 <LL_EXTI_EnableEvent_32_63>
          break;
 80006ec:	e00d      	b.n	800070a <LL_EXTI_Init+0x136>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff fe50 	bl	8000398 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fe97 	bl	8000430 <LL_EXTI_EnableEvent_32_63>
          break;
 8000702:	e002      	b.n	800070a <LL_EXTI_Init+0x136>
        default:
          status = ERROR;
 8000704:	2301      	movs	r3, #1
 8000706:	73fb      	strb	r3, [r7, #15]
          break;
 8000708:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	7a9b      	ldrb	r3, [r3, #10]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d040      	beq.n	8000794 <LL_EXTI_Init+0x1c0>
      {
        switch (EXTI_InitStruct->Trigger)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	7a9b      	ldrb	r3, [r3, #10]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d00e      	beq.n	8000738 <LL_EXTI_Init+0x164>
 800071a:	2b03      	cmp	r3, #3
 800071c:	d017      	beq.n	800074e <LL_EXTI_Init+0x17a>
 800071e:	2b01      	cmp	r3, #1
 8000720:	d120      	bne.n	8000764 <LL_EXTI_Init+0x190>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ff40 	bl	80005ac <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fec9 	bl	80004c8 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8000736:	e02d      	b.n	8000794 <LL_EXTI_Init+0x1c0>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fee9 	bl	8000514 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff0a 	bl	8000560 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800074c:	e022      	b.n	8000794 <LL_EXTI_Init+0x1c0>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff feb8 	bl	80004c8 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff feff 	bl	8000560 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000762:	e017      	b.n	8000794 <LL_EXTI_Init+0x1c0>
          default:
            status = ERROR;
 8000764:	2301      	movs	r3, #1
 8000766:	73fb      	strb	r3, [r7, #15]
            break;
 8000768:	bf00      	nop
 800076a:	e013      	b.n	8000794 <LL_EXTI_Init+0x1c0>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fe23 	bl	80003bc <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fe6a 	bl	8000454 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fe2d 	bl	80003e4 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fe74 	bl	800047c <LL_EXTI_DisableEvent_32_63>
#endif
  }
  return status;
 8000794:	7bfb      	ldrb	r3, [r7, #15]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800079e:	b480      	push	{r7}
 80007a0:	b089      	sub	sp, #36	; 0x24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	60f8      	str	r0, [r7, #12]
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	fa93 f3a3 	rbit	r3, r3
 80007b8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	fab3 f383 	clz	r3, r3
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	2103      	movs	r1, #3
 80007c6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ca:	43db      	mvns	r3, r3
 80007cc:	401a      	ands	r2, r3
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	fa93 f3a3 	rbit	r3, r3
 80007d8:	61bb      	str	r3, [r7, #24]
  return result;
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	fab3 f383 	clz	r3, r3
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	6879      	ldr	r1, [r7, #4]
 80007e6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ea:	431a      	orrs	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	601a      	str	r2, [r3, #0]
}
 80007f0:	bf00      	nop
 80007f2:	3724      	adds	r7, #36	; 0x24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	685a      	ldr	r2, [r3, #4]
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	43db      	mvns	r3, r3
 8000810:	401a      	ands	r2, r3
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	6879      	ldr	r1, [r7, #4]
 8000816:	fb01 f303 	mul.w	r3, r1, r3
 800081a:	431a      	orrs	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	605a      	str	r2, [r3, #4]
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	689a      	ldr	r2, [r3, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	fa93 f3a3 	rbit	r3, r3
 8000846:	613b      	str	r3, [r7, #16]
  return result;
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	fab3 f383 	clz	r3, r3
 800084e:	b2db      	uxtb	r3, r3
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	2103      	movs	r1, #3
 8000854:	fa01 f303 	lsl.w	r3, r1, r3
 8000858:	43db      	mvns	r3, r3
 800085a:	401a      	ands	r2, r3
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	fa93 f3a3 	rbit	r3, r3
 8000866:	61bb      	str	r3, [r7, #24]
  return result;
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	fab3 f383 	clz	r3, r3
 800086e:	b2db      	uxtb	r3, r3
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	fa01 f303 	lsl.w	r3, r1, r3
 8000878:	431a      	orrs	r2, r3
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800087e:	bf00      	nop
 8000880:	3724      	adds	r7, #36	; 0x24
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800088a:	b480      	push	{r7}
 800088c:	b089      	sub	sp, #36	; 0x24
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	68da      	ldr	r2, [r3, #12]
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	fa93 f3a3 	rbit	r3, r3
 80008a4:	613b      	str	r3, [r7, #16]
  return result;
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	fab3 f383 	clz	r3, r3
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	2103      	movs	r1, #3
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	401a      	ands	r2, r3
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	fa93 f3a3 	rbit	r3, r3
 80008c4:	61bb      	str	r3, [r7, #24]
  return result;
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	fab3 f383 	clz	r3, r3
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	fa01 f303 	lsl.w	r3, r1, r3
 80008d6:	431a      	orrs	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	60da      	str	r2, [r3, #12]
}
 80008dc:	bf00      	nop
 80008de:	3724      	adds	r7, #36	; 0x24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	6a1a      	ldr	r2, [r3, #32]
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa93 f3a3 	rbit	r3, r3
 8000902:	613b      	str	r3, [r7, #16]
  return result;
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	fab3 f383 	clz	r3, r3
 800090a:	b2db      	uxtb	r3, r3
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	210f      	movs	r1, #15
 8000910:	fa01 f303 	lsl.w	r3, r1, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	401a      	ands	r2, r3
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	fa93 f3a3 	rbit	r3, r3
 8000922:	61bb      	str	r3, [r7, #24]
  return result;
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	fab3 f383 	clz	r3, r3
 800092a:	b2db      	uxtb	r3, r3
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	fa01 f303 	lsl.w	r3, r1, r3
 8000934:	431a      	orrs	r2, r3
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800093a:	bf00      	nop
 800093c:	3724      	adds	r7, #36	; 0x24
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000946:	b480      	push	{r7}
 8000948:	b089      	sub	sp, #36	; 0x24
 800094a:	af00      	add	r7, sp, #0
 800094c:	60f8      	str	r0, [r7, #12]
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fa93 f3a3 	rbit	r3, r3
 8000962:	613b      	str	r3, [r7, #16]
  return result;
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	fab3 f383 	clz	r3, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	210f      	movs	r1, #15
 8000970:	fa01 f303 	lsl.w	r3, r1, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	401a      	ands	r2, r3
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	0a1b      	lsrs	r3, r3, #8
 800097c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	fa93 f3a3 	rbit	r3, r3
 8000984:	61bb      	str	r3, [r7, #24]
  return result;
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	fab3 f383 	clz	r3, r3
 800098c:	b2db      	uxtb	r3, r3
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	6879      	ldr	r1, [r7, #4]
 8000992:	fa01 f303 	lsl.w	r3, r1, r3
 8000996:	431a      	orrs	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800099c:	bf00      	nop
 800099e:	3724      	adds	r7, #36	; 0x24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	fa93 f3a3 	rbit	r3, r3
 80009be:	613b      	str	r3, [r7, #16]
  return result;
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	fab3 f383 	clz	r3, r3
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80009ca:	e051      	b.n	8000a70 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	2101      	movs	r1, #1
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	fa01 f303 	lsl.w	r3, r1, r3
 80009d8:	4013      	ands	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d043      	beq.n	8000a6a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d003      	beq.n	80009f2 <LL_GPIO_Init+0x4a>
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d10e      	bne.n	8000a10 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	461a      	mov	r2, r3
 80009f8:	69b9      	ldr	r1, [r7, #24]
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff ff16 	bl	800082c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	6819      	ldr	r1, [r3, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff fef6 	bl	80007fc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	691b      	ldr	r3, [r3, #16]
 8000a14:	461a      	mov	r2, r3
 8000a16:	69b9      	ldr	r1, [r7, #24]
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ff36 	bl	800088a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d11a      	bne.n	8000a5c <LL_GPIO_Init+0xb4>
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	fa93 f3a3 	rbit	r3, r3
 8000a30:	60bb      	str	r3, [r7, #8]
  return result;
 8000a32:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000a34:	fab3 f383 	clz	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b07      	cmp	r3, #7
 8000a3c:	d807      	bhi.n	8000a4e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	461a      	mov	r2, r3
 8000a44:	69b9      	ldr	r1, [r7, #24]
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff ff4e 	bl	80008e8 <LL_GPIO_SetAFPin_0_7>
 8000a4c:	e006      	b.n	8000a5c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	461a      	mov	r2, r3
 8000a54:	69b9      	ldr	r1, [r7, #24]
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff ff75 	bl	8000946 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	461a      	mov	r2, r3
 8000a62:	69b9      	ldr	r1, [r7, #24]
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff fe9a 	bl	800079e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	fa22 f303 	lsr.w	r3, r2, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d1a6      	bne.n	80009cc <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8000a7e:	2300      	movs	r3, #0
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <LL_RTC_SetHourFormat>:
  *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
  *         @arg @ref LL_RTC_HOURFORMAT_AMPM
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetHourFormat(RTC_TypeDef *RTCx, uint32_t HourFormat)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	431a      	orrs	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <LL_RTC_GetHourFormat>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
  *         @arg @ref LL_RTC_HOURFORMAT_AMPM
  */
__STATIC_INLINE uint32_t LL_RTC_GetHourFormat(RTC_TypeDef *RTCx)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <LL_RTC_EnableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
  /* Set the Initialization mode */
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	60da      	str	r2, [r3, #12]
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000af4:	60da      	str	r2, [r3, #12]
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <LL_RTC_IsShadowRegBypassEnabled>:
  * @rmtoll CR           BYPSHAD       LL_RTC_IsShadowRegBypassEnabled
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsShadowRegBypassEnabled(RTC_TypeDef *RTCx)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	f003 0320 	and.w	r3, r3, #32
 8000b12:	2b20      	cmp	r3, #32
 8000b14:	bf0c      	ite	eq
 8000b16:	2301      	moveq	r3, #1
 8000b18:	2300      	movne	r3, #0
 8000b1a:	b2db      	uxtb	r3, r3
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	691b      	ldr	r3, [r3, #16]
 8000b36:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	041b      	lsls	r3, r3, #16
 8000b3e:	431a      	orrs	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	611a      	str	r2, [r3, #16]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	691b      	ldr	r3, [r3, #16]
 8000b5e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000b62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	611a      	str	r2, [r3, #16]
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	22ff      	movs	r2, #255	; 0xff
 8000b86:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	22ca      	movs	r2, #202	; 0xca
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2253      	movs	r2, #83	; 0x53
 8000ba6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <LL_RTC_TIME_Config>:
  * @param  Minutes Value between Min_Data=0x00 and Max_Data=0x59
  * @param  Seconds Value between Min_Data=0x00 and Max_Data=0x59
  * @retval None
  */
__STATIC_INLINE void LL_RTC_TIME_Config(RTC_TypeDef *RTCx, uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b087      	sub	sp, #28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]

  temp = Format12_24                                                                                    | \
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	041b      	lsls	r3, r3, #16
 8000bca:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	021b      	lsls	r3, r3, #8
 8000bd6:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8000bd8:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 8000bda:	6a3b      	ldr	r3, [r7, #32]
 8000bdc:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 8000bde:	4313      	orrs	r3, r2
 8000be0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8000bea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	601a      	str	r2, [r3, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	371c      	adds	r7, #28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <LL_RTC_DATE_Config>:
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  * @param  Year Value between Min_Data=0x00 and Max_Data=0x99
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DATE_Config(RTC_TypeDef *RTCx, uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]

  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8000c1a:	6a3b      	ldr	r3, [r7, #32]
 8000c1c:	041b      	lsls	r3, r3, #16
 8000c1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8000c22:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8000c2a:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8000c30:	4313      	orrs	r3, r2
 8000c32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <LL_RTC_DATE_Config+0x4c>)
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	605a      	str	r2, [r3, #4]
}
 8000c44:	bf00      	nop
 8000c46:	371c      	adds	r7, #28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	ff0000c0 	.word	0xff0000c0

08000c54 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c64:	2b40      	cmp	r3, #64	; 0x40
 8000c66:	bf0c      	ite	eq
 8000c68:	2301      	moveq	r3, #1
 8000c6a:	2300      	movne	r3, #0
 8000c6c:	b2db      	uxtb	r3, r3
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	f003 0320 	and.w	r3, r3, #32
 8000c8a:	2b20      	cmp	r3, #32
 8000c8c:	bf0c      	ite	eq
 8000c8e:	2301      	moveq	r3, #1
 8000c90:	2300      	movne	r3, #0
 8000c92:	b2db      	uxtb	r3, r3
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb0:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	60da      	str	r2, [r3, #12]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd4:	bf0c      	ite	eq
 8000cd6:	2301      	moveq	r3, #1
 8000cd8:	2300      	movne	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000e010 	.word	0xe000e010

08000cec <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ff4a 	bl	8000b94 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f000 f999 	bl	8001038 <LL_RTC_EnterInitMode>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d016      	beq.n	8000d3a <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff feb8 	bl	8000a88 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ff16 	bl	8000b50 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff fefc 	bl	8000b28 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff fed8 	bl	8000ae6 <LL_RTC_DisableInitMode>

    status = SUCCESS;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ff1d 	bl	8000b7a <LL_RTC_EnableWriteProtection>

  return status;
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 8000d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af02      	add	r7, sp, #8
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d109      	bne.n	8000d76 <LL_RTC_TIME_Init+0x2a>
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8000d62:	68f8      	ldr	r0, [r7, #12]
 8000d64:	f7ff fea3 	bl	8000aae <LL_RTC_GetHourFormat>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10c      	bne.n	8000d88 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(RTC_TimeStruct->Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	e008      	b.n	8000d88 <LL_RTC_TIME_Init+0x3c>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
  }
  else
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8000d76:	68f8      	ldr	r0, [r7, #12]
 8000d78:	f7ff fe99 	bl	8000aae <LL_RTC_GetHourFormat>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d102      	bne.n	8000d88 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f7ff ff03 	bl	8000b94 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f000 f952 	bl	8001038 <LL_RTC_EnterInitMode>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d073      	beq.n	8000e82 <LL_RTC_TIME_Init+0x136>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00f      	beq.n	8000dc0 <LL_RTC_TIME_Init+0x74>
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6819      	ldr	r1, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	791b      	ldrb	r3, [r3, #4]
 8000da8:	461a      	mov	r2, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	795b      	ldrb	r3, [r3, #5]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8000dae:	4618      	mov	r0, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	799b      	ldrb	r3, [r3, #6]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	4603      	mov	r3, r0
 8000db8:	68f8      	ldr	r0, [r7, #12]
 8000dba:	f7ff fefb 	bl	8000bb4 <LL_RTC_TIME_Config>
 8000dbe:	e04f      	b.n	8000e60 <LL_RTC_TIME_Init+0x114>
    }
    else
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681c      	ldr	r4, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	791b      	ldrb	r3, [r3, #4]
 8000dc8:	4a32      	ldr	r2, [pc, #200]	; (8000e94 <LL_RTC_TIME_Init+0x148>)
 8000dca:	fba2 2303 	umull	r2, r3, r2, r3
 8000dce:	08db      	lsrs	r3, r3, #3
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	b2d8      	uxtb	r0, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	791a      	ldrb	r2, [r3, #4]
 8000dda:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <LL_RTC_TIME_Init+0x148>)
 8000ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8000de0:	08d9      	lsrs	r1, r3, #3
 8000de2:	460b      	mov	r3, r1
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	440b      	add	r3, r1
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4303      	orrs	r3, r0
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	795b      	ldrb	r3, [r3, #5]
 8000df8:	4a26      	ldr	r2, [pc, #152]	; (8000e94 <LL_RTC_TIME_Init+0x148>)
 8000dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfe:	08db      	lsrs	r3, r3, #3
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	b2d8      	uxtb	r0, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	795a      	ldrb	r2, [r3, #5]
 8000e0a:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <LL_RTC_TIME_Init+0x148>)
 8000e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8000e10:	08d9      	lsrs	r1, r3, #3
 8000e12:	460b      	mov	r3, r1
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	440b      	add	r3, r1
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	4303      	orrs	r3, r0
 8000e20:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8000e22:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	799b      	ldrb	r3, [r3, #6]
 8000e28:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <LL_RTC_TIME_Init+0x148>)
 8000e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2e:	08db      	lsrs	r3, r3, #3
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	b2d8      	uxtb	r0, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	799a      	ldrb	r2, [r3, #6]
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <LL_RTC_TIME_Init+0x148>)
 8000e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8000e40:	08d9      	lsrs	r1, r3, #3
 8000e42:	460b      	mov	r3, r1
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	440b      	add	r3, r1
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	4303      	orrs	r3, r0
 8000e50:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	4633      	mov	r3, r6
 8000e56:	462a      	mov	r2, r5
 8000e58:	4621      	mov	r1, r4
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f7ff feaa 	bl	8000bb4 <LL_RTC_TIME_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8000e60:	68f8      	ldr	r0, [r7, #12]
 8000e62:	f7ff fe40 	bl	8000ae6 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f7ff fe4b 	bl	8000b02 <LL_RTC_IsShadowRegBypassEnabled>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d105      	bne.n	8000e7e <LL_RTC_TIME_Init+0x132>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8000e72:	68f8      	ldr	r0, [r7, #12]
 8000e74:	f000 f915 	bl	80010a2 <LL_RTC_WaitForSynchro>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	75fb      	strb	r3, [r7, #23]
 8000e7c:	e001      	b.n	8000e82 <LL_RTC_TIME_Init+0x136>
    }
    else
    {
      status = SUCCESS;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f7ff fe79 	bl	8000b7a <LL_RTC_EnableWriteProtection>

  return status;
 8000e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	371c      	adds	r7, #28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e92:	bf00      	nop
 8000e94:	cccccccd 	.word	0xcccccccd

08000e98 <LL_RTC_TIME_StructInit>:
  * @brief  Set each @ref LL_RTC_TimeTypeDef field to default value (Time = 00h:00min:00sec).
  * @param  RTC_TimeStruct pointer to a @ref LL_RTC_TimeTypeDef structure which will be initialized.
  * @retval None
  */
void LL_RTC_TIME_StructInit(LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->TimeFormat = LL_RTC_TIME_FORMAT_AM_OR_24;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
  RTC_TimeStruct->Hours      = 0U;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	711a      	strb	r2, [r3, #4]
  RTC_TimeStruct->Minutes    = 0U;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	715a      	strb	r2, [r3, #5]
  RTC_TimeStruct->Seconds    = 0U;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	719a      	strb	r2, [r3, #6]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <LL_RTC_DATE_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Day register is configured
  *          - ERROR: RTC Day register is not configured
  */
ErrorStatus LL_RTC_DATE_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_DateTypeDef *RTC_DateStruct)
{
 8000ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af02      	add	r7, sp, #8
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10e      	bne.n	8000ef8 <LL_RTC_DATE_Init+0x34>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	785b      	ldrb	r3, [r3, #1]
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d008      	beq.n	8000ef8 <LL_RTC_DATE_Init+0x34>
  {
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	785b      	ldrb	r3, [r3, #1]
 8000eea:	f023 0310 	bic.w	r3, r3, #16
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	330a      	adds	r3, #10
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	705a      	strb	r2, [r3, #1]
    assert_param(IS_LL_RTC_DAY(__LL_RTC_CONVERT_BCD2BIN(RTC_DateStruct->Day)));
  }
  assert_param(IS_LL_RTC_WEEKDAY(RTC_DateStruct->WeekDay));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f7ff fe4b 	bl	8000b94 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f000 f89a 	bl	8001038 <LL_RTC_EnterInitMode>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d075      	beq.n	8000ff6 <LL_RTC_DATE_Init+0x132>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d010      	beq.n	8000f32 <LL_RTC_DATE_Init+0x6e>
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	789b      	ldrb	r3, [r3, #2]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	785b      	ldrb	r3, [r3, #1]
 8000f20:	4618      	mov	r0, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	78db      	ldrb	r3, [r3, #3]
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	4603      	mov	r3, r0
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f7ff fe6a 	bl	8000c04 <LL_RTC_DATE_Config>
 8000f30:	e050      	b.n	8000fd4 <LL_RTC_DATE_Init+0x110>
    }
    else
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461c      	mov	r4, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	789b      	ldrb	r3, [r3, #2]
 8000f3c:	4a32      	ldr	r2, [pc, #200]	; (8001008 <LL_RTC_DATE_Init+0x144>)
 8000f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f42:	08db      	lsrs	r3, r3, #3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	b2d8      	uxtb	r0, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	789a      	ldrb	r2, [r3, #2]
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <LL_RTC_DATE_Init+0x144>)
 8000f50:	fba3 1302 	umull	r1, r3, r3, r2
 8000f54:	08d9      	lsrs	r1, r3, #3
 8000f56:	460b      	mov	r3, r1
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	4303      	orrs	r3, r0
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	785b      	ldrb	r3, [r3, #1]
 8000f6c:	4a26      	ldr	r2, [pc, #152]	; (8001008 <LL_RTC_DATE_Init+0x144>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	08db      	lsrs	r3, r3, #3
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	b2d8      	uxtb	r0, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	785a      	ldrb	r2, [r3, #1]
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <LL_RTC_DATE_Init+0x144>)
 8000f80:	fba3 1302 	umull	r1, r3, r3, r2
 8000f84:	08d9      	lsrs	r1, r3, #3
 8000f86:	460b      	mov	r3, r1
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4303      	orrs	r3, r0
 8000f94:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8000f96:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	78db      	ldrb	r3, [r3, #3]
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <LL_RTC_DATE_Init+0x144>)
 8000f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa2:	08db      	lsrs	r3, r3, #3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	b2d8      	uxtb	r0, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	78da      	ldrb	r2, [r3, #3]
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <LL_RTC_DATE_Init+0x144>)
 8000fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb4:	08d9      	lsrs	r1, r3, #3
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	440b      	add	r3, r1
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	4303      	orrs	r3, r0
 8000fc4:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	4633      	mov	r3, r6
 8000fca:	462a      	mov	r2, r5
 8000fcc:	4621      	mov	r1, r4
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f7ff fe18 	bl	8000c04 <LL_RTC_DATE_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f7ff fd86 	bl	8000ae6 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f7ff fd91 	bl	8000b02 <LL_RTC_IsShadowRegBypassEnabled>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d105      	bne.n	8000ff2 <LL_RTC_DATE_Init+0x12e>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f000 f85b 	bl	80010a2 <LL_RTC_WaitForSynchro>
 8000fec:	4603      	mov	r3, r0
 8000fee:	75fb      	strb	r3, [r7, #23]
 8000ff0:	e001      	b.n	8000ff6 <LL_RTC_DATE_Init+0x132>
    }
    else
    {
      status = SUCCESS;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f7ff fdbf 	bl	8000b7a <LL_RTC_EnableWriteProtection>

  return status;
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	371c      	adds	r7, #28
 8001002:	46bd      	mov	sp, r7
 8001004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001006:	bf00      	nop
 8001008:	cccccccd 	.word	0xcccccccd

0800100c <LL_RTC_DATE_StructInit>:
  * @brief  Set each @ref LL_RTC_DateTypeDef field to default value (date = Monday, January 01 xx00)
  * @param  RTC_DateStruct pointer to a @ref LL_RTC_DateTypeDef structure which will be initialized.
  * @retval None
  */
void LL_RTC_DATE_StructInit(LL_RTC_DateTypeDef *RTC_DateStruct)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Monday, January 01 xx00 */
  RTC_DateStruct->WeekDay = LL_RTC_WEEKDAY_MONDAY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
  RTC_DateStruct->Day     = 1U;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->Month   = LL_RTC_MONTH_JANUARY;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2201      	movs	r2, #1
 8001024:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->Year    = 0U;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	70da      	strb	r2, [r3, #3]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8001040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001044:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8001046:	2300      	movs	r3, #0
 8001048:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fe00 	bl	8000c54 <LL_RTC_IsActiveFlag_INIT>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d11e      	bne.n	8001098 <LL_RTC_EnterInitMode+0x60>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fd35 	bl	8000aca <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff fdf7 	bl	8000c54 <LL_RTC_IsActiveFlag_INIT>
 8001066:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8001068:	e010      	b.n	800108c <LL_RTC_EnterInitMode+0x54>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800106a:	f7ff fe2b 	bl	8000cc4 <LL_SYSTICK_IsActiveCounterFlag>
 800106e:	4603      	mov	r3, r0
 8001070:	2b01      	cmp	r3, #1
 8001072:	d102      	bne.n	800107a <LL_RTC_EnterInitMode+0x42>
      {
        timeout --;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3b01      	subs	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff fdea 	bl	8000c54 <LL_RTC_IsActiveFlag_INIT>
 8001080:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <LL_RTC_EnterInitMode+0x54>
      {
        status = ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <LL_RTC_EnterInitMode+0x60>
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d1e8      	bne.n	800106a <LL_RTC_EnterInitMode+0x32>
      }
    }
  }
  return status;
 8001098:	7dfb      	ldrb	r3, [r7, #23]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 80010aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ae:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 80010b0:	2300      	movs	r3, #0
 80010b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff fdf1 	bl	8000ca0 <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fddb 	bl	8000c7a <LL_RTC_IsActiveFlag_RS>
 80010c4:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 0U))
 80010c6:	e010      	b.n	80010ea <LL_RTC_WaitForSynchro+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80010c8:	f7ff fdfc 	bl	8000cc4 <LL_SYSTICK_IsActiveCounterFlag>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d102      	bne.n	80010d8 <LL_RTC_WaitForSynchro+0x36>
    {
      timeout--;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff fdce 	bl	8000c7a <LL_RTC_IsActiveFlag_RS>
 80010de:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <LL_RTC_WaitForSynchro+0x48>
    {
      status = ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 0U))
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <LL_RTC_WaitForSynchro+0x54>
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1e8      	bne.n	80010c8 <LL_RTC_WaitForSynchro+0x26>
    }
  }

  if (status != ERROR)
 80010f6:	7dfb      	ldrb	r3, [r7, #23]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d01e      	beq.n	800113a <LL_RTC_WaitForSynchro+0x98>
  {
    timeout = RTC_SYNCHRO_TIMEOUT;
 80010fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001100:	60fb      	str	r3, [r7, #12]
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fdb9 	bl	8000c7a <LL_RTC_IsActiveFlag_RS>
 8001108:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 800110a:	e010      	b.n	800112e <LL_RTC_WaitForSynchro+0x8c>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800110c:	f7ff fdda 	bl	8000cc4 <LL_SYSTICK_IsActiveCounterFlag>
 8001110:	4603      	mov	r3, r0
 8001112:	2b01      	cmp	r3, #1
 8001114:	d102      	bne.n	800111c <LL_RTC_WaitForSynchro+0x7a>
      {
        timeout--;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	3b01      	subs	r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fdac 	bl	8000c7a <LL_RTC_IsActiveFlag_RS>
 8001122:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <LL_RTC_WaitForSynchro+0x8c>
      {
        status = ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <LL_RTC_WaitForSynchro+0x98>
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d1e8      	bne.n	800110c <LL_RTC_WaitForSynchro+0x6a>
      }
    }
  }

  return (status);
 800113a:	7dfb      	ldrb	r3, [r7, #23]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001154:	2b40      	cmp	r3, #64	; 0x40
 8001156:	d101      	bne.n	800115c <LL_SPI_IsEnabled+0x18>
 8001158:	2301      	movs	r3, #1
 800115a:	e000      	b.n	800115e <LL_SPI_IsEnabled+0x1a>
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <LL_SPI_SetRxFIFOThreshold>:
  *         @arg @ref LL_SPI_RX_FIFO_TH_HALF
  *         @arg @ref LL_SPI_RX_FIFO_TH_QUARTER
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	431a      	orrs	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	605a      	str	r2, [r3, #4]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	611a      	str	r2, [r3, #16]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffc0 	bl	8001144 <LL_SPI_IsEnabled>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d145      	bne.n	8001256 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80011d2:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	6811      	ldr	r1, [r2, #0]
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	6852      	ldr	r2, [r2, #4]
 80011de:	4311      	orrs	r1, r2
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	68d2      	ldr	r2, [r2, #12]
 80011e4:	4311      	orrs	r1, r2
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	6912      	ldr	r2, [r2, #16]
 80011ea:	4311      	orrs	r1, r2
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	6952      	ldr	r2, [r2, #20]
 80011f0:	4311      	orrs	r1, r2
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	6992      	ldr	r2, [r2, #24]
 80011f6:	4311      	orrs	r1, r2
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	69d2      	ldr	r2, [r2, #28]
 80011fc:	4311      	orrs	r1, r2
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	6a12      	ldr	r2, [r2, #32]
 8001202:	430a      	orrs	r2, r1
 8001204:	431a      	orrs	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001212:	f023 0304 	bic.w	r3, r3, #4
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	6891      	ldr	r1, [r2, #8]
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	6952      	ldr	r2, [r2, #20]
 800121e:	0c12      	lsrs	r2, r2, #16
 8001220:	430a      	orrs	r2, r1
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001230:	d204      	bcs.n	800123c <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8001232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ff97 	bl	800116a <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001244:	d105      	bne.n	8001252 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	4619      	mov	r1, r3
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff9f 	bl	8001190 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8001252:	2300      	movs	r3, #0
 8001254:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8001256:	7bfb      	ldrb	r3, [r7, #15]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800126a:	4909      	ldr	r1, [pc, #36]	; (8001290 <LL_InitTick+0x30>)
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	fbb2 f3f3 	udiv	r3, r2, r3
 8001274:	3b01      	subs	r3, #1
 8001276:	604b      	str	r3, [r1, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <LL_InitTick+0x30>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <LL_InitTick+0x30>)
 8001280:	2205      	movs	r2, #5
 8001282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000e010 	.word	0xe000e010

08001294 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800129c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ffdd 	bl	8001260 <LL_InitTick>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <LL_mDelay+0x44>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80012be:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c6:	d00c      	beq.n	80012e2 <LL_mDelay+0x32>
  {
    Delay++;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3301      	adds	r3, #1
 80012cc:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80012ce:	e008      	b.n	80012e2 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <LL_mDelay+0x44>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <LL_mDelay+0x32>
    {
      Delay--;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	607b      	str	r3, [r7, #4]
  while (Delay)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f3      	bne.n	80012d0 <LL_mDelay+0x20>
    }
  }
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000e010 	.word	0xe000e010

080012f8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <LL_SetSystemCoreClock+0x1c>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000300 	.word	0x20000300

08001318 <HAL_getPRESSED>:
#include "gpio_bismar.h"
#include "main.h"
#include "gpio.h"

void HAL_getPRESSED(GPIO_PORT PORT, JOYSTICK_POS *selection){
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
	JOYSTICK_POS selectedItem = NULL2;
 8001324:	2305      	movs	r3, #5
 8001326:	73fb      	strb	r3, [r7, #15]
	bool pressedFLAG = FALSE;
 8001328:	2300      	movs	r3, #0
 800132a:	73bb      	strb	r3, [r7, #14]
	if(PORT == B){
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d112      	bne.n	8001358 <HAL_getPRESSED+0x40>
		digitalREAD(PIN_5, PORT, &selectedItem, &pressedFLAG);
 8001332:	f107 030e 	add.w	r3, r7, #14
 8001336:	f107 020f 	add.w	r2, r7, #15
 800133a:	79f9      	ldrb	r1, [r7, #7]
 800133c:	2020      	movs	r0, #32
 800133e:	f001 fa6d 	bl	800281c <digitalREAD>
		if(pressedFLAG == FALSE){
 8001342:	7bbb      	ldrb	r3, [r7, #14]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d107      	bne.n	8001358 <HAL_getPRESSED+0x40>
			digitalREAD(PIN_0, PORT, &selectedItem, &pressedFLAG);
 8001348:	f107 030e 	add.w	r3, r7, #14
 800134c:	f107 020f 	add.w	r2, r7, #15
 8001350:	79f9      	ldrb	r1, [r7, #7]
 8001352:	2001      	movs	r0, #1
 8001354:	f001 fa62 	bl	800281c <digitalREAD>
		}
	}
	if(PORT == C){
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	2b03      	cmp	r3, #3
 800135c:	d112      	bne.n	8001384 <HAL_getPRESSED+0x6c>
		digitalREAD(PIN_0, C, &selectedItem, &pressedFLAG);
 800135e:	f107 030e 	add.w	r3, r7, #14
 8001362:	f107 020f 	add.w	r2, r7, #15
 8001366:	2103      	movs	r1, #3
 8001368:	2001      	movs	r0, #1
 800136a:	f001 fa57 	bl	800281c <digitalREAD>
		if(pressedFLAG == FALSE){
 800136e:	7bbb      	ldrb	r3, [r7, #14]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d107      	bne.n	8001384 <HAL_getPRESSED+0x6c>
			digitalREAD(PIN_1, C, &selectedItem, &pressedFLAG);
 8001374:	f107 030e 	add.w	r3, r7, #14
 8001378:	f107 020f 	add.w	r2, r7, #15
 800137c:	2103      	movs	r1, #3
 800137e:	2002      	movs	r0, #2
 8001380:	f001 fa4c 	bl	800281c <digitalREAD>
		}
	}
	if(PORT == A){
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d107      	bne.n	800139a <HAL_getPRESSED+0x82>
		digitalREAD(PIN_4, A, &selectedItem, &pressedFLAG);
 800138a:	f107 030e 	add.w	r3, r7, #14
 800138e:	f107 020f 	add.w	r2, r7, #15
 8001392:	2101      	movs	r1, #1
 8001394:	2010      	movs	r0, #16
 8001396:	f001 fa41 	bl	800281c <digitalREAD>
	}
	*selection = selectedItem;
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	701a      	strb	r2, [r3, #0]


}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	619a      	str	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_LCD_dataWrite>:
#include "HAL_LCD.h"


void HAL_LCD_dataWrite(uint8_t data)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
	MX_SPI1_CSlow();
 80013ea:	f002 f823 	bl	8003434 <MX_SPI1_CSlow>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);		//A0 pin high
 80013ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f6:	f7ff ffd7 	bl	80013a8 <LL_GPIO_SetOutputPin>
	MX_SPI1_Send(data);
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 f82d 	bl	800345c <MX_SPI1_Send>
	MX_SPI1_CShigh();
 8001402:	f002 f821 	bl	8003448 <MX_SPI1_CShigh>
	return;
 8001406:	bf00      	nop
}
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_LCD_cmdWrite>:


void HAL_LCD_cmdWrite(uint8_t data)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]
	MX_SPI1_CSlow();
 8001418:	f002 f80c 	bl	8003434 <MX_SPI1_CSlow>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);	//A0 pin low
 800141c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001424:	f7ff ffce 	bl	80013c4 <LL_GPIO_ResetOutputPin>
	MX_SPI1_Send(data);
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	4618      	mov	r0, r3
 800142c:	f002 f816 	bl	800345c <MX_SPI1_Send>
	MX_SPI1_CShigh();
 8001430:	f002 f80a 	bl	8003448 <MX_SPI1_CShigh>
	return;
 8001434:	bf00      	nop
}
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_LCD_dispImage>:


void HAL_LCD_dispImage(uint8_t *image, uint8_t width, uint8_t height, uint8_t page_start, uint8_t column_start)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	4608      	mov	r0, r1
 8001446:	4611      	mov	r1, r2
 8001448:	461a      	mov	r2, r3
 800144a:	4603      	mov	r3, r0
 800144c:	70fb      	strb	r3, [r7, #3]
 800144e:	460b      	mov	r3, r1
 8001450:	70bb      	strb	r3, [r7, #2]
 8001452:	4613      	mov	r3, r2
 8001454:	707b      	strb	r3, [r7, #1]
	uint8_t page;
	uint8_t index;
	uint8_t page_max;
	uint8_t column_max;

	index = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	73bb      	strb	r3, [r7, #14]

	page_max = page_start + (height-1) / HAL_DISPLAY_BITS;
 800145a:	78bb      	ldrb	r3, [r7, #2]
 800145c:	3b01      	subs	r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	da00      	bge.n	8001464 <HAL_LCD_dispImage+0x28>
 8001462:	3307      	adds	r3, #7
 8001464:	10db      	asrs	r3, r3, #3
 8001466:	b2da      	uxtb	r2, r3
 8001468:	787b      	ldrb	r3, [r7, #1]
 800146a:	4413      	add	r3, r2
 800146c:	737b      	strb	r3, [r7, #13]
	if(height % HAL_DISPLAY_BITS > 0)
 800146e:	78bb      	ldrb	r3, [r7, #2]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d002      	beq.n	8001480 <HAL_LCD_dispImage+0x44>
	{
		page_max++;
 800147a:	7b7b      	ldrb	r3, [r7, #13]
 800147c:	3301      	adds	r3, #1
 800147e:	737b      	strb	r3, [r7, #13]
	}
	if(page_max >(HAL_DISPLAY_MAX_PAGE-1))
 8001480:	7b7b      	ldrb	r3, [r7, #13]
 8001482:	2b03      	cmp	r3, #3
 8001484:	d901      	bls.n	800148a <HAL_LCD_dispImage+0x4e>
	{
		page_max = HAL_DISPLAY_MAX_PAGE-1;
 8001486:	2303      	movs	r3, #3
 8001488:	737b      	strb	r3, [r7, #13]
	}

	column_max = column_start + width -1;
 800148a:	7e3a      	ldrb	r2, [r7, #24]
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	4413      	add	r3, r2
 8001490:	b2db      	uxtb	r3, r3
 8001492:	3b01      	subs	r3, #1
 8001494:	733b      	strb	r3, [r7, #12]
	if(column_max >= HAL_LCD_WIDTH)
 8001496:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	da01      	bge.n	80014a2 <HAL_LCD_dispImage+0x66>
	{
		column_max = HAL_LCD_WIDTH -1;
 800149e:	237f      	movs	r3, #127	; 0x7f
 80014a0:	733b      	strb	r3, [r7, #12]
	}


	//HAL_LCD_cmdWrite(DISPLAY_OFF);
	HAL_LCD_cmdWrite(COG_CMD_START_LINE(0));
 80014a2:	2040      	movs	r0, #64	; 0x40
 80014a4:	f7ff ffb3 	bl	800140e <HAL_LCD_cmdWrite>

	for(page = page_start; page <= page_max; page++)
 80014a8:	787b      	ldrb	r3, [r7, #1]
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e034      	b.n	8001518 <HAL_LCD_dispImage+0xdc>
	{
		HAL_LCD_cmdWrite(COG_CMD_PAGE_SET(page));
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ffa4 	bl	800140e <HAL_LCD_cmdWrite>
		for (uint8_t column = column_start; column <= column_max; column++)
 80014c6:	7e3b      	ldrb	r3, [r7, #24]
 80014c8:	72fb      	strb	r3, [r7, #11]
 80014ca:	e01e      	b.n	800150a <HAL_LCD_dispImage+0xce>
		{
			HAL_LCD_cmdWrite(COG_CMD_COLUMN_LSB(column));
 80014cc:	7afb      	ldrb	r3, [r7, #11]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff9a 	bl	800140e <HAL_LCD_cmdWrite>
			HAL_LCD_cmdWrite(COG_CMD_COLUMN_MSB(column));
 80014da:	7afb      	ldrb	r3, [r7, #11]
 80014dc:	091b      	lsrs	r3, r3, #4
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	f043 0310 	orr.w	r3, r3, #16
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff8f 	bl	800140e <HAL_LCD_cmdWrite>

			HAL_LCD_dataWrite(image[index++]);
 80014f0:	7bbb      	ldrb	r3, [r7, #14]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	73ba      	strb	r2, [r7, #14]
 80014f6:	461a      	mov	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4413      	add	r3, r2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff6e 	bl	80013e0 <HAL_LCD_dataWrite>
		for (uint8_t column = column_start; column <= column_max; column++)
 8001504:	7afb      	ldrb	r3, [r7, #11]
 8001506:	3301      	adds	r3, #1
 8001508:	72fb      	strb	r3, [r7, #11]
 800150a:	7afa      	ldrb	r2, [r7, #11]
 800150c:	7b3b      	ldrb	r3, [r7, #12]
 800150e:	429a      	cmp	r2, r3
 8001510:	d9dc      	bls.n	80014cc <HAL_LCD_dispImage+0x90>
	for(page = page_start; page <= page_max; page++)
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	3301      	adds	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	7b7b      	ldrb	r3, [r7, #13]
 800151c:	429a      	cmp	r2, r3
 800151e:	d9c6      	bls.n	80014ae <HAL_LCD_dispImage+0x72>
		}
	}
	HAL_LCD_cmdWrite(DISPLAY_ON);
 8001520:	20af      	movs	r0, #175	; 0xaf
 8001522:	f7ff ff74 	bl	800140e <HAL_LCD_cmdWrite>
	return;
 8001526:	bf00      	nop
}
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_LCD_printletter>:


void HAL_LCD_printletter(uint8_t string, uint8_t pag, uint8_t col)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af02      	add	r7, sp, #8
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
 800153a:	460b      	mov	r3, r1
 800153c:	71bb      	strb	r3, [r7, #6]
 800153e:	4613      	mov	r3, r2
 8001540:	717b      	strb	r3, [r7, #5]
	HAL_LCD_dispImage((Font+(string * SMALLFONT_WIDTH)), SMALLFONT_WIDTH, SMALLFONT_HEIGHT, pag, col);
 8001542:	79fa      	ldrb	r2, [r7, #7]
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	461a      	mov	r2, r3
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <HAL_LCD_printletter+0x3c>)
 8001550:	18d0      	adds	r0, r2, r3
 8001552:	79ba      	ldrb	r2, [r7, #6]
 8001554:	797b      	ldrb	r3, [r7, #5]
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	4613      	mov	r3, r2
 800155a:	2208      	movs	r2, #8
 800155c:	2106      	movs	r1, #6
 800155e:	f7ff ff6d 	bl	800143c <HAL_LCD_dispImage>
	return;
 8001562:	bf00      	nop
}
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000000 	.word	0x20000000

08001570 <HAL_LCD_print>:



void HAL_LCD_print(uint8_t *word, uint8_t start_page, uint8_t start_column, uint8_t size)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	4608      	mov	r0, r1
 800157a:	4611      	mov	r1, r2
 800157c:	461a      	mov	r2, r3
 800157e:	4603      	mov	r3, r0
 8001580:	70fb      	strb	r3, [r7, #3]
 8001582:	460b      	mov	r3, r1
 8001584:	70bb      	strb	r3, [r7, #2]
 8001586:	4613      	mov	r3, r2
 8001588:	707b      	strb	r3, [r7, #1]
	uint8_t letter;
	uint8_t page_update = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	737b      	strb	r3, [r7, #13]
	uint8_t column_update = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	73bb      	strb	r3, [r7, #14]

	for (letter = 0; letter < size; letter++)
 8001592:	2300      	movs	r3, #0
 8001594:	73fb      	strb	r3, [r7, #15]
 8001596:	e014      	b.n	80015c2 <HAL_LCD_print+0x52>
	{
		HAL_LCD_printletter(word[letter], start_page+page_update, start_column+column_update);
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	7818      	ldrb	r0, [r3, #0]
 80015a0:	78fa      	ldrb	r2, [r7, #3]
 80015a2:	7b7b      	ldrb	r3, [r7, #13]
 80015a4:	4413      	add	r3, r2
 80015a6:	b2d9      	uxtb	r1, r3
 80015a8:	78ba      	ldrb	r2, [r7, #2]
 80015aa:	7bbb      	ldrb	r3, [r7, #14]
 80015ac:	4413      	add	r3, r2
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	f7ff ffbd 	bl	8001530 <HAL_LCD_printletter>

		column_update = column_update + SMALLFONT_WIDTH + 1;
 80015b6:	7bbb      	ldrb	r3, [r7, #14]
 80015b8:	3307      	adds	r3, #7
 80015ba:	73bb      	strb	r3, [r7, #14]
	for (letter = 0; letter < size; letter++)
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	3301      	adds	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	787b      	ldrb	r3, [r7, #1]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d3e6      	bcc.n	8001598 <HAL_LCD_print+0x28>

	}
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_LCD_printPotUpdate>:

void HAL_LCD_printPotUpdate(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
	uint8_t pothh, potmm;

	pothh = HAL_getHR(HAL_PotValue(POT1_CHANNEL));
 80015da:	2000      	movs	r0, #0
 80015dc:	f000 f8e5 	bl	80017aa <HAL_PotValue>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f8f7 	bl	80017d6 <HAL_getHR>
 80015e8:	4603      	mov	r3, r0
 80015ea:	73fb      	strb	r3, [r7, #15]
	potmm = HAL_getMin(HAL_PotValue(POT2_CHANNEL));
 80015ec:	2001      	movs	r0, #1
 80015ee:	f000 f8dc 	bl	80017aa <HAL_PotValue>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 f9f7 	bl	80019e8 <HAL_getMin>
 80015fa:	4603      	mov	r3, r0
 80015fc:	73bb      	strb	r3, [r7, #14]

	uint8_t min_small = potmm % 10;
 80015fe:	7bba      	ldrb	r2, [r7, #14]
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_LCD_printPotUpdate+0xb4>)
 8001602:	fba3 1302 	umull	r1, r3, r3, r2
 8001606:	08d9      	lsrs	r1, r3, #3
 8001608:	460b      	mov	r3, r1
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	737b      	strb	r3, [r7, #13]
	uint8_t min_big = potmm/10;
 8001614:	7bbb      	ldrb	r3, [r7, #14]
 8001616:	4a1c      	ldr	r2, [pc, #112]	; (8001688 <HAL_LCD_printPotUpdate+0xb4>)
 8001618:	fba2 2303 	umull	r2, r3, r2, r3
 800161c:	08db      	lsrs	r3, r3, #3
 800161e:	733b      	strb	r3, [r7, #12]
	uint8_t hour_small = pothh % 10;
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_LCD_printPotUpdate+0xb4>)
 8001624:	fba3 1302 	umull	r1, r3, r3, r2
 8001628:	08d9      	lsrs	r1, r3, #3
 800162a:	460b      	mov	r3, r1
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	72fb      	strb	r3, [r7, #11]
	uint8_t hour_big = pothh/10;
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	4a13      	ldr	r2, [pc, #76]	; (8001688 <HAL_LCD_printPotUpdate+0xb4>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	08db      	lsrs	r3, r3, #3
 8001640:	72bb      	strb	r3, [r7, #10]

	uint8_t lcd_pot_update[8] = {(hour_big+48), (hour_small+48), ':', (min_big+48), (min_small+48), ':', ('0'), ('0')};
 8001642:	7abb      	ldrb	r3, [r7, #10]
 8001644:	3330      	adds	r3, #48	; 0x30
 8001646:	b2db      	uxtb	r3, r3
 8001648:	703b      	strb	r3, [r7, #0]
 800164a:	7afb      	ldrb	r3, [r7, #11]
 800164c:	3330      	adds	r3, #48	; 0x30
 800164e:	b2db      	uxtb	r3, r3
 8001650:	707b      	strb	r3, [r7, #1]
 8001652:	233a      	movs	r3, #58	; 0x3a
 8001654:	70bb      	strb	r3, [r7, #2]
 8001656:	7b3b      	ldrb	r3, [r7, #12]
 8001658:	3330      	adds	r3, #48	; 0x30
 800165a:	b2db      	uxtb	r3, r3
 800165c:	70fb      	strb	r3, [r7, #3]
 800165e:	7b7b      	ldrb	r3, [r7, #13]
 8001660:	3330      	adds	r3, #48	; 0x30
 8001662:	b2db      	uxtb	r3, r3
 8001664:	713b      	strb	r3, [r7, #4]
 8001666:	233a      	movs	r3, #58	; 0x3a
 8001668:	717b      	strb	r3, [r7, #5]
 800166a:	2330      	movs	r3, #48	; 0x30
 800166c:	71bb      	strb	r3, [r7, #6]
 800166e:	2330      	movs	r3, #48	; 0x30
 8001670:	71fb      	strb	r3, [r7, #7]
	HAL_LCD_print (lcd_pot_update, 2, 40, 8);
 8001672:	4638      	mov	r0, r7
 8001674:	2308      	movs	r3, #8
 8001676:	2228      	movs	r2, #40	; 0x28
 8001678:	2102      	movs	r1, #2
 800167a:	f7ff ff79 	bl	8001570 <HAL_LCD_print>
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	cccccccd 	.word	0xcccccccd

0800168c <HAL_LCD_Clear>:




void HAL_LCD_Clear(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
	unsigned int i,j;
	unsigned char page = 0xB0;
 8001692:	23b0      	movs	r3, #176	; 0xb0
 8001694:	71fb      	strb	r3, [r7, #7]

	HAL_LCD_cmdWrite(0xA4);
 8001696:	20a4      	movs	r0, #164	; 0xa4
 8001698:	f7ff feb9 	bl	800140e <HAL_LCD_cmdWrite>
	HAL_LCD_cmdWrite(DISPLAY_OFF);
 800169c:	20ae      	movs	r0, #174	; 0xae
 800169e:	f7ff feb6 	bl	800140e <HAL_LCD_cmdWrite>
	HAL_LCD_cmdWrite(COG_CMD_START_LINE(0));				//Start Address Line
 80016a2:	2040      	movs	r0, #64	; 0x40
 80016a4:	f7ff feb3 	bl	800140e <HAL_LCD_cmdWrite>
	for(i=0;i<4;i++){
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	e030      	b.n	8001710 <HAL_LCD_Clear+0x84>
		HAL_LCD_cmdWrite(COG_CMD_PAGE_SET(i));			//Page Address
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fea5 	bl	800140e <HAL_LCD_cmdWrite>
		for(j=0;j<128;j++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	e019      	b.n	80016fe <HAL_LCD_Clear+0x72>
		{
			HAL_LCD_cmdWrite(COG_CMD_COLUMN_LSB(j));
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fe9a 	bl	800140e <HAL_LCD_cmdWrite>
			HAL_LCD_cmdWrite(COG_CMD_COLUMN_MSB(j));
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f043 0310 	orr.w	r3, r3, #16
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fe8e 	bl	800140e <HAL_LCD_cmdWrite>

			HAL_LCD_dataWrite(0x00);	//Clear
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff fe74 	bl	80013e0 <HAL_LCD_dataWrite>
		for(j=0;j<128;j++)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	3301      	adds	r3, #1
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b7f      	cmp	r3, #127	; 0x7f
 8001702:	d9e2      	bls.n	80016ca <HAL_LCD_Clear+0x3e>
		}
		page++;
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	3301      	adds	r3, #1
 8001708:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<4;i++){
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3301      	adds	r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b03      	cmp	r3, #3
 8001714:	d9cb      	bls.n	80016ae <HAL_LCD_Clear+0x22>
	}
	HAL_LCD_cmdWrite(DISPLAY_ON);
 8001716:	20af      	movs	r0, #175	; 0xaf
 8001718:	f7ff fe79 	bl	800140e <HAL_LCD_cmdWrite>
	return;
 800171c:	bf00      	nop
}
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_LCD_Init>:




void HAL_LCD_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  MX_SPI1_Init();
 8001728:	f001 fe1c 	bl	8003364 <MX_SPI1_Init>

  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);		//Reset Pin low
 800172c:	2140      	movs	r1, #64	; 0x40
 800172e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001732:	f7ff fe47 	bl	80013c4 <LL_GPIO_ResetOutputPin>
  LL_mDelay(100);
 8001736:	2064      	movs	r0, #100	; 0x64
 8001738:	f7ff fdba 	bl	80012b0 <LL_mDelay>
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_6);		//Reset Pin High
 800173c:	2140      	movs	r1, #64	; 0x40
 800173e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001742:	f7ff fe31 	bl	80013a8 <LL_GPIO_SetOutputPin>
  LL_mDelay(100);
 8001746:	2064      	movs	r0, #100	; 0x64
 8001748:	f7ff fdb2 	bl	80012b0 <LL_mDelay>

  HAL_LCD_cmdWrite(0xA0);											// ADC select
 800174c:	20a0      	movs	r0, #160	; 0xa0
 800174e:	f7ff fe5e 	bl	800140e <HAL_LCD_cmdWrite>
  HAL_LCD_cmdWrite(DISPLAY_OFF);
 8001752:	20ae      	movs	r0, #174	; 0xae
 8001754:	f7ff fe5b 	bl	800140e <HAL_LCD_cmdWrite>
  HAL_LCD_cmdWrite(COG_CMD_COMMON_OUTPUT(COG_COMMON_REVERSE));   	// COM direction scan
 8001758:	20c8      	movs	r0, #200	; 0xc8
 800175a:	f7ff fe58 	bl	800140e <HAL_LCD_cmdWrite>
  HAL_LCD_cmdWrite(COG_CMD_LCD_BIAS(COG_LCD_BIAS_0));  				// LCD bias set
 800175e:	20a0      	movs	r0, #160	; 0xa0
 8001760:	f7ff fe55 	bl	800140e <HAL_LCD_cmdWrite>
  HAL_LCD_cmdWrite(0x2F);  											// Power Control set
 8001764:	202f      	movs	r0, #47	; 0x2f
 8001766:	f7ff fe52 	bl	800140e <HAL_LCD_cmdWrite>
  HAL_LCD_cmdWrite(0x21);  											// Resistor Ratio Set
 800176a:	2021      	movs	r0, #33	; 0x21
 800176c:	f7ff fe4f 	bl	800140e <HAL_LCD_cmdWrite>
  HAL_LCD_cmdWrite(0x81);   										// Electronic Volume Command (set contrast) Double Btye: 1 of 2
 8001770:	2081      	movs	r0, #129	; 0x81
 8001772:	f7ff fe4c 	bl	800140e <HAL_LCD_cmdWrite>
  HAL_LCD_cmdWrite(0x20);   										// Electronic Volume value (contrast value) Double Byte: 2 of 2
 8001776:	2020      	movs	r0, #32
 8001778:	f7ff fe49 	bl	800140e <HAL_LCD_cmdWrite>
  HAL_LCD_cmdWrite(COG_CMD_START_LINE(0));							// Display Start Line
 800177c:	2040      	movs	r0, #64	; 0x40
 800177e:	f7ff fe46 	bl	800140e <HAL_LCD_cmdWrite>
  HAL_LCD_cmdWrite(0xA4);
 8001782:	20a4      	movs	r0, #164	; 0xa4
 8001784:	f7ff fe43 	bl	800140e <HAL_LCD_cmdWrite>
  HAL_LCD_cmdWrite(DISPLAY_ON);
 8001788:	20af      	movs	r0, #175	; 0xaf
 800178a:	f7ff fe40 	bl	800140e <HAL_LCD_cmdWrite>
  HAL_LCD_Clear();
 800178e:	f7ff ff7d 	bl	800168c <HAL_LCD_Clear>

  return;
 8001792:	bf00      	nop
}
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_Pot_Available>:

/**
  * @brief Configuration of the Pots with the ADC channels
  */
void HAL_Pot_Available(void)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 800179a:	f000 fdf3 	bl	8002384 <MX_ADC1_Init>
	MX_ADC1_Calibration();
 800179e:	f000 fe8f 	bl	80024c0 <MX_ADC1_Calibration>
	MX_ADC1_Enable();
 80017a2:	f000 fe9e 	bl	80024e2 <MX_ADC1_Enable>
  }
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_PotValue>:
/**
  * @brief This function handles Memory management fault.
  */
uint16_t HAL_PotValue(ADC_CHANNEL Ch)

{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	71fb      	strb	r3, [r7, #7]
	uint16_t adc_Result = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	81fb      	strh	r3, [r7, #14]
	MX_ADC1_SetChannel(Ch);
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 fea2 	bl	8002504 <MX_ADC1_SetChannel>
	MX_ADC1_StartConvertion();
 80017c0:	f000 fec4 	bl	800254c <MX_ADC1_StartConvertion>
	adc_Result = MX_ADC1_Value();
 80017c4:	f000 fed6 	bl	8002574 <MX_ADC1_Value>
 80017c8:	4603      	mov	r3, r0
 80017ca:	81fb      	strh	r3, [r7, #14]
	return adc_Result;
 80017cc:	89fb      	ldrh	r3, [r7, #14]

}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_getHR>:
	  uint16_t vp2 = 0;
	  vp2 = HAL_PotValue(POT2_CHANNEL);
	  return vp2;
}

uint8_t HAL_getHR(uint16_t hr){
 80017d6:	b480      	push	{r7}
 80017d8:	b085      	sub	sp, #20
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	80fb      	strh	r3, [r7, #6]
	uint32_t hr1 = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
	  if(hr >= 0 && hr <= 42){
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	2b2a      	cmp	r3, #42	; 0x2a
 80017e8:	d802      	bhi.n	80017f0 <HAL_getHR+0x1a>
	  		  //printf("\n\rHora: 1 \n\r");
	  		  hr1=1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	e0f3      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if( hr >= 43 &&  hr <= 85){
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	2b2a      	cmp	r3, #42	; 0x2a
 80017f4:	d905      	bls.n	8001802 <HAL_getHR+0x2c>
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	2b55      	cmp	r3, #85	; 0x55
 80017fa:	d802      	bhi.n	8001802 <HAL_getHR+0x2c>
	  		  //printf("\n\rHora: 2 \n\r");
	  		  hr1=2;
 80017fc:	2302      	movs	r3, #2
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e0ea      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if( hr >= 86 && hr <= 128){
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	2b55      	cmp	r3, #85	; 0x55
 8001806:	d905      	bls.n	8001814 <HAL_getHR+0x3e>
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	2b80      	cmp	r3, #128	; 0x80
 800180c:	d802      	bhi.n	8001814 <HAL_getHR+0x3e>
	  		  //printf("\n\rHora: 3 \n\r");
	  		  hr1=3;
 800180e:	2303      	movs	r3, #3
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	e0e1      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 129 && hr <= 171){
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	2b80      	cmp	r3, #128	; 0x80
 8001818:	d905      	bls.n	8001826 <HAL_getHR+0x50>
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	2bab      	cmp	r3, #171	; 0xab
 800181e:	d802      	bhi.n	8001826 <HAL_getHR+0x50>
	  		  //printf("\n\rHora: 4 \n\r");
	  		  hr1=4;
 8001820:	2304      	movs	r3, #4
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	e0d8      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 172 && hr <= 214){
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	2bab      	cmp	r3, #171	; 0xab
 800182a:	d905      	bls.n	8001838 <HAL_getHR+0x62>
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	2bd6      	cmp	r3, #214	; 0xd6
 8001830:	d802      	bhi.n	8001838 <HAL_getHR+0x62>
	  		  //printf("\n\rHora: 5 \n\r");
	  		  hr1=5;
 8001832:	2305      	movs	r3, #5
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	e0cf      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 215 && hr <= 257){
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	2bd6      	cmp	r3, #214	; 0xd6
 800183c:	d906      	bls.n	800184c <HAL_getHR+0x76>
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001844:	d202      	bcs.n	800184c <HAL_getHR+0x76>
	  		  //printf("\n\rHora: 6 \n\r");
	  		  hr1=6;
 8001846:	2306      	movs	r3, #6
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e0c5      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 258 && hr <= 300){
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001852:	d306      	bcc.n	8001862 <HAL_getHR+0x8c>
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800185a:	d802      	bhi.n	8001862 <HAL_getHR+0x8c>
	  		 // printf("\n\rHora: 7 \n\r");
	  		  hr1=7;
 800185c:	2307      	movs	r3, #7
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	e0ba      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 301 && hr <= 343){
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001868:	d906      	bls.n	8001878 <HAL_getHR+0xa2>
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 8001870:	d202      	bcs.n	8001878 <HAL_getHR+0xa2>
	  		  //printf("\n\rHora: 8 \n\r");
	  		  hr1=8;
 8001872:	2308      	movs	r3, #8
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	e0af      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 344 && hr <= 386){
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 800187e:	d306      	bcc.n	800188e <HAL_getHR+0xb8>
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8001886:	d802      	bhi.n	800188e <HAL_getHR+0xb8>
	  		  //printf("\n\rHora: 9 \n\r");
	  		  hr1=9;
 8001888:	2309      	movs	r3, #9
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	e0a4      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 387 && hr <= 429){
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8001894:	d906      	bls.n	80018a4 <HAL_getHR+0xce>
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 800189c:	d202      	bcs.n	80018a4 <HAL_getHR+0xce>
	  		  //printf("\n\rHora: 10 \n\r");
	  		  hr1=10;
 800189e:	230a      	movs	r3, #10
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	e099      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 430 && hr <= 472){
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 80018aa:	d306      	bcc.n	80018ba <HAL_getHR+0xe4>
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	f5b3 7fec 	cmp.w	r3, #472	; 0x1d8
 80018b2:	d802      	bhi.n	80018ba <HAL_getHR+0xe4>
	  		 // printf("\n\rHora: 11 \n\r");
	  		  hr1=11;
 80018b4:	230b      	movs	r3, #11
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	e08e      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 473 && hr <= 515){
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	f5b3 7fec 	cmp.w	r3, #472	; 0x1d8
 80018c0:	d906      	bls.n	80018d0 <HAL_getHR+0xfa>
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 80018c8:	d202      	bcs.n	80018d0 <HAL_getHR+0xfa>
	  		  //printf("\n\rHora: 12 \n\r");
	  		  hr1=12;
 80018ca:	230c      	movs	r3, #12
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	e083      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 516 && hr <= 558){
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 80018d6:	d307      	bcc.n	80018e8 <HAL_getHR+0x112>
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	f240 222e 	movw	r2, #558	; 0x22e
 80018de:	4293      	cmp	r3, r2
 80018e0:	d802      	bhi.n	80018e8 <HAL_getHR+0x112>
	  		  //printf("\n\rHora: 12 \n\r");
	  		  hr1=13;
 80018e2:	230d      	movs	r3, #13
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	e077      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 559 && hr <= 601){
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	f240 222e 	movw	r2, #558	; 0x22e
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d907      	bls.n	8001902 <HAL_getHR+0x12c>
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	f240 2259 	movw	r2, #601	; 0x259
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d802      	bhi.n	8001902 <HAL_getHR+0x12c>
	  		  //printf("\n\rHora: 12 \n\r");
	  		  hr1=14;
 80018fc:	230e      	movs	r3, #14
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	e06a      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 602 && hr <= 644){
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	f240 2259 	movw	r2, #601	; 0x259
 8001908:	4293      	cmp	r3, r2
 800190a:	d906      	bls.n	800191a <HAL_getHR+0x144>
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	f5b3 7f21 	cmp.w	r3, #644	; 0x284
 8001912:	d802      	bhi.n	800191a <HAL_getHR+0x144>
	  		  //printf("\n\rHora: 12 \n\r");
	  		  hr1=15;
 8001914:	230f      	movs	r3, #15
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	e05e      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 645 && hr <= 687){
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	f5b3 7f21 	cmp.w	r3, #644	; 0x284
 8001920:	d906      	bls.n	8001930 <HAL_getHR+0x15a>
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	f5b3 7f2c 	cmp.w	r3, #688	; 0x2b0
 8001928:	d202      	bcs.n	8001930 <HAL_getHR+0x15a>
	  		  //printf("\n\rHora: 12 \n\r");
	  		  hr1=16;
 800192a:	2310      	movs	r3, #16
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	e053      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 689 && hr <= 730){
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	f5b3 7f2c 	cmp.w	r3, #688	; 0x2b0
 8001936:	d907      	bls.n	8001948 <HAL_getHR+0x172>
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	f240 22da 	movw	r2, #730	; 0x2da
 800193e:	4293      	cmp	r3, r2
 8001940:	d802      	bhi.n	8001948 <HAL_getHR+0x172>
	  		  //printf("\n\rHora: 12 \n\r");
	  		  hr1=17;
 8001942:	2311      	movs	r3, #17
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	e047      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 731 && hr <= 773){
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	f240 22da 	movw	r2, #730	; 0x2da
 800194e:	4293      	cmp	r3, r2
 8001950:	d907      	bls.n	8001962 <HAL_getHR+0x18c>
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	f240 3205 	movw	r2, #773	; 0x305
 8001958:	4293      	cmp	r3, r2
 800195a:	d802      	bhi.n	8001962 <HAL_getHR+0x18c>
	  		  //printf("\n\rHora: 12 \n\r");
	  		  hr1=18;
 800195c:	2312      	movs	r3, #18
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	e03a      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 774 && hr <= 816){
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	f240 3205 	movw	r2, #773	; 0x305
 8001968:	4293      	cmp	r3, r2
 800196a:	d906      	bls.n	800197a <HAL_getHR+0x1a4>
 800196c:	88fb      	ldrh	r3, [r7, #6]
 800196e:	f5b3 7f4c 	cmp.w	r3, #816	; 0x330
 8001972:	d802      	bhi.n	800197a <HAL_getHR+0x1a4>
	  		  //printf("\n\rHora: 12 \n\r");
	  		  hr1=19;
 8001974:	2313      	movs	r3, #19
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	e02e      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 817 && hr <= 859){
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	f5b3 7f4c 	cmp.w	r3, #816	; 0x330
 8001980:	d906      	bls.n	8001990 <HAL_getHR+0x1ba>
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 8001988:	d202      	bcs.n	8001990 <HAL_getHR+0x1ba>
	  		  //printf("\n\rHora: 12 \n\r");
	  		  hr1=20;
 800198a:	2314      	movs	r3, #20
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	e023      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 860 && hr <= 902){
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 8001996:	d307      	bcc.n	80019a8 <HAL_getHR+0x1d2>
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	f240 3286 	movw	r2, #902	; 0x386
 800199e:	4293      	cmp	r3, r2
 80019a0:	d802      	bhi.n	80019a8 <HAL_getHR+0x1d2>
	  		  //printf("\n\rHora: 12 \n\r");
	  		  hr1=21;
 80019a2:	2315      	movs	r3, #21
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e017      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 903 && hr <= 945){
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	f240 3286 	movw	r2, #902	; 0x386
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d907      	bls.n	80019c2 <HAL_getHR+0x1ec>
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	f240 32b1 	movw	r2, #945	; 0x3b1
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d802      	bhi.n	80019c2 <HAL_getHR+0x1ec>
	  		  //printf("\n\rHora: 12 \n\r");
	  		  hr1=22;
 80019bc:	2316      	movs	r3, #22
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	e00a      	b.n	80019d8 <HAL_getHR+0x202>
	  	  }
	  	  else if (hr >= 946 && hr <= 1024){
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	f240 32b1 	movw	r2, #945	; 0x3b1
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d905      	bls.n	80019d8 <HAL_getHR+0x202>
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d2:	d801      	bhi.n	80019d8 <HAL_getHR+0x202>
	  		  //printf("\n\rHora: 12 \n\r");
	  		  hr1=23;
 80019d4:	2317      	movs	r3, #23
 80019d6:	60fb      	str	r3, [r7, #12]
	  	  }
	  return hr1;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	b2db      	uxtb	r3, r3
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_getMin>:

uint8_t HAL_getMin(uint16_t min){
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]
	uint32_t min1 =0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
	if(min >= 0 && min <= 17){
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	2b11      	cmp	r3, #17
 80019fa:	d802      	bhi.n	8001a02 <HAL_getMin+0x1a>
		  		  //printf("Minuto: 0 \n\r");
		  		  min1=0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	e286      	b.n	8001f10 <HAL_getMin+0x528>
		  	  }
		  	  else if( min >= 18 &&  min <= 34){
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	2b11      	cmp	r3, #17
 8001a06:	d905      	bls.n	8001a14 <HAL_getMin+0x2c>
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	2b22      	cmp	r3, #34	; 0x22
 8001a0c:	d802      	bhi.n	8001a14 <HAL_getMin+0x2c>
		  		  //printf("Minuto: 1 \n\r");
		  		  min1=1;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	e27d      	b.n	8001f10 <HAL_getMin+0x528>
		  	  }
		  	  else if( min >= 35 && min <= 51){
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	2b22      	cmp	r3, #34	; 0x22
 8001a18:	d905      	bls.n	8001a26 <HAL_getMin+0x3e>
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	2b33      	cmp	r3, #51	; 0x33
 8001a1e:	d802      	bhi.n	8001a26 <HAL_getMin+0x3e>
		  		  //printf("Minuto: 2 \n\r");
		  		  min1=2;
 8001a20:	2302      	movs	r3, #2
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e274      	b.n	8001f10 <HAL_getMin+0x528>
		  	  }
		  	  else if (min >= 52 && min <= 68){
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	2b33      	cmp	r3, #51	; 0x33
 8001a2a:	d905      	bls.n	8001a38 <HAL_getMin+0x50>
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	2b44      	cmp	r3, #68	; 0x44
 8001a30:	d802      	bhi.n	8001a38 <HAL_getMin+0x50>
		  		  //printf("Minuto: 3 \n\r");
		  		  min1=3;
 8001a32:	2303      	movs	r3, #3
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	e26b      	b.n	8001f10 <HAL_getMin+0x528>
		  	  }
		  	  else if (min >= 69 && min <= 85){
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	2b44      	cmp	r3, #68	; 0x44
 8001a3c:	d905      	bls.n	8001a4a <HAL_getMin+0x62>
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	2b55      	cmp	r3, #85	; 0x55
 8001a42:	d802      	bhi.n	8001a4a <HAL_getMin+0x62>
		  		  //printf("Minuto: 4 \n\r");
		  		  min1=4;
 8001a44:	2304      	movs	r3, #4
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	e262      	b.n	8001f10 <HAL_getMin+0x528>
		  	  }
		  	  else if (min >= 86 && min <= 102){
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	2b55      	cmp	r3, #85	; 0x55
 8001a4e:	d905      	bls.n	8001a5c <HAL_getMin+0x74>
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	2b66      	cmp	r3, #102	; 0x66
 8001a54:	d802      	bhi.n	8001a5c <HAL_getMin+0x74>
		  		  //printf("Minuto: 5 \n\r");
		  		  min1=5;
 8001a56:	2305      	movs	r3, #5
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	e259      	b.n	8001f10 <HAL_getMin+0x528>
		  	  }
		  	  else if (min >= 103 && min <= 119){
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	2b66      	cmp	r3, #102	; 0x66
 8001a60:	d905      	bls.n	8001a6e <HAL_getMin+0x86>
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	2b77      	cmp	r3, #119	; 0x77
 8001a66:	d802      	bhi.n	8001a6e <HAL_getMin+0x86>
		  		  //printf("Minuto: 6 \n\r");
		  		  min1=6;
 8001a68:	2306      	movs	r3, #6
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	e250      	b.n	8001f10 <HAL_getMin+0x528>
		  	  }
		  	  else if (min >= 120 && min <= 136){
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	2b77      	cmp	r3, #119	; 0x77
 8001a72:	d905      	bls.n	8001a80 <HAL_getMin+0x98>
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	2b88      	cmp	r3, #136	; 0x88
 8001a78:	d802      	bhi.n	8001a80 <HAL_getMin+0x98>
		  		  //printf("Minuto: 7 \n\r");
		  		  min1=7;
 8001a7a:	2307      	movs	r3, #7
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	e247      	b.n	8001f10 <HAL_getMin+0x528>
		  	  }
		  	  else if (min >= 137 && min <= 153){
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	2b88      	cmp	r3, #136	; 0x88
 8001a84:	d905      	bls.n	8001a92 <HAL_getMin+0xaa>
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	2b99      	cmp	r3, #153	; 0x99
 8001a8a:	d802      	bhi.n	8001a92 <HAL_getMin+0xaa>
		  		  //printf("Minuto: 8 \n\r");
		  		  min1=8;
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	e23e      	b.n	8001f10 <HAL_getMin+0x528>
		  	  }
		  	  else if (min >= 154 && min <= 170){
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	2b99      	cmp	r3, #153	; 0x99
 8001a96:	d905      	bls.n	8001aa4 <HAL_getMin+0xbc>
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	2baa      	cmp	r3, #170	; 0xaa
 8001a9c:	d802      	bhi.n	8001aa4 <HAL_getMin+0xbc>
		  		  //printf("Minuto: 9 \n\r");
		  		  min1=9;
 8001a9e:	2309      	movs	r3, #9
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	e235      	b.n	8001f10 <HAL_getMin+0x528>
		  	  }
		  	  else if (min>= 171 && min<= 187){
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	2baa      	cmp	r3, #170	; 0xaa
 8001aa8:	d905      	bls.n	8001ab6 <HAL_getMin+0xce>
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	2bbb      	cmp	r3, #187	; 0xbb
 8001aae:	d802      	bhi.n	8001ab6 <HAL_getMin+0xce>
		  		  //printf("Minuto: 10 \n\r");
		  		  min1=10;
 8001ab0:	230a      	movs	r3, #10
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	e22c      	b.n	8001f10 <HAL_getMin+0x528>
		  	  }
		  	  else if (min >= 188 && min <= 204){
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	2bbb      	cmp	r3, #187	; 0xbb
 8001aba:	d905      	bls.n	8001ac8 <HAL_getMin+0xe0>
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	2bcc      	cmp	r3, #204	; 0xcc
 8001ac0:	d802      	bhi.n	8001ac8 <HAL_getMin+0xe0>
				  //printf("Minuto: 11 \n\r");
				  min1=11;
 8001ac2:	230b      	movs	r3, #11
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	e223      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 205 && min <= 221){
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	2bcc      	cmp	r3, #204	; 0xcc
 8001acc:	d905      	bls.n	8001ada <HAL_getMin+0xf2>
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	2bdd      	cmp	r3, #221	; 0xdd
 8001ad2:	d802      	bhi.n	8001ada <HAL_getMin+0xf2>
				  //printf("Minuto: 12 \n\r");
				  min1=12;
 8001ad4:	230c      	movs	r3, #12
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	e21a      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 222 && min <= 238){
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	2bdd      	cmp	r3, #221	; 0xdd
 8001ade:	d905      	bls.n	8001aec <HAL_getMin+0x104>
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	2bee      	cmp	r3, #238	; 0xee
 8001ae4:	d802      	bhi.n	8001aec <HAL_getMin+0x104>
				  //printf("Minuto: 13 \n\r");
				  min1=13;
 8001ae6:	230d      	movs	r3, #13
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	e211      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 239 && min <= 255){
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	2bee      	cmp	r3, #238	; 0xee
 8001af0:	d905      	bls.n	8001afe <HAL_getMin+0x116>
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	2bff      	cmp	r3, #255	; 0xff
 8001af6:	d802      	bhi.n	8001afe <HAL_getMin+0x116>
				  //printf("Minuto: 14 \n\r");
				  min1=14;
 8001af8:	230e      	movs	r3, #14
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	e208      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 256 && min <= 272){
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	2bff      	cmp	r3, #255	; 0xff
 8001b02:	d906      	bls.n	8001b12 <HAL_getMin+0x12a>
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001b0a:	d802      	bhi.n	8001b12 <HAL_getMin+0x12a>
				  //printf("Minuto: 15 \n\r");
				  min1=15;
 8001b0c:	230f      	movs	r3, #15
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	e1fe      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 273 && min <= 289){
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001b18:	d906      	bls.n	8001b28 <HAL_getMin+0x140>
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8001b20:	d202      	bcs.n	8001b28 <HAL_getMin+0x140>
				  //printf("Minuto: 16 \n\r");
				  min1=16;
 8001b22:	2310      	movs	r3, #16
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	e1f3      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 290 && min <= 306){
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8001b2e:	d306      	bcc.n	8001b3e <HAL_getMin+0x156>
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001b36:	d802      	bhi.n	8001b3e <HAL_getMin+0x156>
				  //printf("Minuto: 17 \n\r");
				  min1=17;
 8001b38:	2311      	movs	r3, #17
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	e1e8      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 307 && min <= 323){
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001b44:	d906      	bls.n	8001b54 <HAL_getMin+0x16c>
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8001b4c:	d202      	bcs.n	8001b54 <HAL_getMin+0x16c>
				  //printf("Minuto: 18 \n\r");
				  min1=18;
 8001b4e:	2312      	movs	r3, #18
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	e1dd      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 324 && min <= 340){
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8001b5a:	d306      	bcc.n	8001b6a <HAL_getMin+0x182>
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8001b62:	d802      	bhi.n	8001b6a <HAL_getMin+0x182>
				  //printf("Minuto: 19 \n\r");
				  min1=19;
 8001b64:	2313      	movs	r3, #19
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	e1d2      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 341 && min <= 357){
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8001b70:	d906      	bls.n	8001b80 <HAL_getMin+0x198>
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8001b78:	d202      	bcs.n	8001b80 <HAL_getMin+0x198>
				  //printf("Minuto: 20 \n\r");
				  min1=20;
 8001b7a:	2314      	movs	r3, #20
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	e1c7      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 358 && min <= 374){
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8001b86:	d306      	bcc.n	8001b96 <HAL_getMin+0x1ae>
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 8001b8e:	d802      	bhi.n	8001b96 <HAL_getMin+0x1ae>
				  //printf("Minuto: 21 \n\r");
				  min1=21;
 8001b90:	2315      	movs	r3, #21
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	e1bc      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 375 && min <= 391){
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 8001b9c:	d906      	bls.n	8001bac <HAL_getMin+0x1c4>
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 8001ba4:	d202      	bcs.n	8001bac <HAL_getMin+0x1c4>
				  //printf("Minuto: 22 \n\r");
				  min1=22;
 8001ba6:	2316      	movs	r3, #22
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	e1b1      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 392 && min <= 408){
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 8001bb2:	d306      	bcc.n	8001bc2 <HAL_getMin+0x1da>
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	f5b3 7fcc 	cmp.w	r3, #408	; 0x198
 8001bba:	d802      	bhi.n	8001bc2 <HAL_getMin+0x1da>
				  //printf("Minuto: 23 \n\r");
				  min1=23;
 8001bbc:	2317      	movs	r3, #23
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	e1a6      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 409 && min <= 425){
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	f5b3 7fcc 	cmp.w	r3, #408	; 0x198
 8001bc8:	d906      	bls.n	8001bd8 <HAL_getMin+0x1f0>
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
 8001bd0:	d202      	bcs.n	8001bd8 <HAL_getMin+0x1f0>
				  //printf("Minuto: 24 \n\r");
				  min1=24;
 8001bd2:	2318      	movs	r3, #24
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	e19b      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 426 && min <= 442){
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
 8001bde:	d306      	bcc.n	8001bee <HAL_getMin+0x206>
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	f5b3 7fdd 	cmp.w	r3, #442	; 0x1ba
 8001be6:	d802      	bhi.n	8001bee <HAL_getMin+0x206>
				  //printf("Minuto: 25 \n\r");
				  min1=25;
 8001be8:	2319      	movs	r3, #25
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	e190      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 443 && min <= 459){
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	f5b3 7fdd 	cmp.w	r3, #442	; 0x1ba
 8001bf4:	d906      	bls.n	8001c04 <HAL_getMin+0x21c>
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8001bfc:	d202      	bcs.n	8001c04 <HAL_getMin+0x21c>
				  //printf("Minuto: 26 \n\r");
				  min1=26;
 8001bfe:	231a      	movs	r3, #26
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	e185      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 460 && min <= 476){
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8001c0a:	d306      	bcc.n	8001c1a <HAL_getMin+0x232>
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	f5b3 7fee 	cmp.w	r3, #476	; 0x1dc
 8001c12:	d802      	bhi.n	8001c1a <HAL_getMin+0x232>
				  //printf("Minuto: 27 \n\r");
				  min1=27;
 8001c14:	231b      	movs	r3, #27
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	e17a      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 477 && min <= 493){
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	f5b3 7fee 	cmp.w	r3, #476	; 0x1dc
 8001c20:	d906      	bls.n	8001c30 <HAL_getMin+0x248>
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8001c28:	d202      	bcs.n	8001c30 <HAL_getMin+0x248>
				 // printf("Minuto: 28 \n\r");
				  min1=28;
 8001c2a:	231c      	movs	r3, #28
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	e16f      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 494 && min <= 510){
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8001c36:	d306      	bcc.n	8001c46 <HAL_getMin+0x25e>
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001c3e:	d802      	bhi.n	8001c46 <HAL_getMin+0x25e>
				 // printf("Minuto: 29 \n\r");
				  min1=29;
 8001c40:	231d      	movs	r3, #29
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	e164      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 511 && min <= 527){
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001c4c:	d906      	bls.n	8001c5c <HAL_getMin+0x274>
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8001c54:	d202      	bcs.n	8001c5c <HAL_getMin+0x274>
				 // printf("Minuto: 30 \n\r");
				  min1=30;
 8001c56:	231e      	movs	r3, #30
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	e159      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 528 && min <= 544){
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8001c62:	d306      	bcc.n	8001c72 <HAL_getMin+0x28a>
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
 8001c6a:	d802      	bhi.n	8001c72 <HAL_getMin+0x28a>
				 // printf("Minuto: 31 \n\r");
				  min1=31;
 8001c6c:	231f      	movs	r3, #31
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	e14e      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 545 && min <= 561){
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
 8001c78:	d907      	bls.n	8001c8a <HAL_getMin+0x2a2>
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	f240 2231 	movw	r2, #561	; 0x231
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d802      	bhi.n	8001c8a <HAL_getMin+0x2a2>
				 // printf("Minuto: 32 \n\r");
				  min1=32;
 8001c84:	2320      	movs	r3, #32
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	e142      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 562 && min <= 578){
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	f240 2231 	movw	r2, #561	; 0x231
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d907      	bls.n	8001ca4 <HAL_getMin+0x2bc>
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	f240 2242 	movw	r2, #578	; 0x242
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d802      	bhi.n	8001ca4 <HAL_getMin+0x2bc>
				 // printf("Minuto: 33 \n\r");
				  min1=33;
 8001c9e:	2321      	movs	r3, #33	; 0x21
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	e135      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 579 && min <= 595){
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	f240 2242 	movw	r2, #578	; 0x242
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d906      	bls.n	8001cbc <HAL_getMin+0x2d4>
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 8001cb4:	d202      	bcs.n	8001cbc <HAL_getMin+0x2d4>
				 // printf("Minuto: 34 \n\r");
				  min1=34;
 8001cb6:	2322      	movs	r3, #34	; 0x22
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	e129      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 596 && min <= 612){
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 8001cc2:	d306      	bcc.n	8001cd2 <HAL_getMin+0x2ea>
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	f5b3 7f19 	cmp.w	r3, #612	; 0x264
 8001cca:	d802      	bhi.n	8001cd2 <HAL_getMin+0x2ea>
				 // printf("Minuto: 35 \n\r");
				  min1=35;
 8001ccc:	2323      	movs	r3, #35	; 0x23
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	e11e      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 613 && min <= 629){
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	f5b3 7f19 	cmp.w	r3, #612	; 0x264
 8001cd8:	d907      	bls.n	8001cea <HAL_getMin+0x302>
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	f240 2275 	movw	r2, #629	; 0x275
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d802      	bhi.n	8001cea <HAL_getMin+0x302>
				 // printf("Minuto: 36 \n\r");
				  min1=36;
 8001ce4:	2324      	movs	r3, #36	; 0x24
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	e112      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 630 && min <= 646){
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	f240 2275 	movw	r2, #629	; 0x275
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d907      	bls.n	8001d04 <HAL_getMin+0x31c>
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	f240 2286 	movw	r2, #646	; 0x286
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d802      	bhi.n	8001d04 <HAL_getMin+0x31c>
				  //printf("Minuto: 37 \n\r");
				  min1=37;
 8001cfe:	2325      	movs	r3, #37	; 0x25
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	e105      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 647 && min <= 663){
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	f240 2286 	movw	r2, #646	; 0x286
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d906      	bls.n	8001d1c <HAL_getMin+0x334>
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	f5b3 7f26 	cmp.w	r3, #664	; 0x298
 8001d14:	d202      	bcs.n	8001d1c <HAL_getMin+0x334>
				  //printf("Minuto: 38 \n\r");
				  min1=38;
 8001d16:	2326      	movs	r3, #38	; 0x26
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	e0f9      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 664 && min <= 680){
 8001d1c:	88fb      	ldrh	r3, [r7, #6]
 8001d1e:	f5b3 7f26 	cmp.w	r3, #664	; 0x298
 8001d22:	d306      	bcc.n	8001d32 <HAL_getMin+0x34a>
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8001d2a:	d802      	bhi.n	8001d32 <HAL_getMin+0x34a>
				 // printf("Minuto: 39 \n\r");
				  min1=39;
 8001d2c:	2327      	movs	r3, #39	; 0x27
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	e0ee      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 681 && min <= 697){
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8001d38:	d907      	bls.n	8001d4a <HAL_getMin+0x362>
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	f240 22b9 	movw	r2, #697	; 0x2b9
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d802      	bhi.n	8001d4a <HAL_getMin+0x362>
				 // printf("Minuto: 40 \n\r");
				  min1=40;
 8001d44:	2328      	movs	r3, #40	; 0x28
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	e0e2      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 698 && min <= 714){
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	f240 22b9 	movw	r2, #697	; 0x2b9
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d907      	bls.n	8001d64 <HAL_getMin+0x37c>
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	f240 22ca 	movw	r2, #714	; 0x2ca
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d802      	bhi.n	8001d64 <HAL_getMin+0x37c>
				 // printf("Minuto: 41 \n\r");
				  min1=41;
 8001d5e:	2329      	movs	r3, #41	; 0x29
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	e0d5      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 715 && min <= 731){
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	f240 22ca 	movw	r2, #714	; 0x2ca
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d906      	bls.n	8001d7c <HAL_getMin+0x394>
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	f5b3 7f37 	cmp.w	r3, #732	; 0x2dc
 8001d74:	d202      	bcs.n	8001d7c <HAL_getMin+0x394>
				 // printf("Minuto: 42 \n\r");
				  min1=42;
 8001d76:	232a      	movs	r3, #42	; 0x2a
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	e0c9      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 732 && min <= 748){
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	f5b3 7f37 	cmp.w	r3, #732	; 0x2dc
 8001d82:	d306      	bcc.n	8001d92 <HAL_getMin+0x3aa>
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	f5b3 7f3b 	cmp.w	r3, #748	; 0x2ec
 8001d8a:	d802      	bhi.n	8001d92 <HAL_getMin+0x3aa>
				 // printf("Minuto: 43 \n\r");
				  min1=43;
 8001d8c:	232b      	movs	r3, #43	; 0x2b
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	e0be      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 749 && min <= 765){
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	f5b3 7f3b 	cmp.w	r3, #748	; 0x2ec
 8001d98:	d907      	bls.n	8001daa <HAL_getMin+0x3c2>
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	f240 22fd 	movw	r2, #765	; 0x2fd
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d802      	bhi.n	8001daa <HAL_getMin+0x3c2>
				//  printf("Minuto: 44 \n\r");
				  min1=44;
 8001da4:	232c      	movs	r3, #44	; 0x2c
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	e0b2      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 766 && min <= 782){
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	f240 22fd 	movw	r2, #765	; 0x2fd
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d907      	bls.n	8001dc4 <HAL_getMin+0x3dc>
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	f240 320e 	movw	r2, #782	; 0x30e
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d802      	bhi.n	8001dc4 <HAL_getMin+0x3dc>
				//  printf("Minuto: 45 \n\r");
				  min1=45;
 8001dbe:	232d      	movs	r3, #45	; 0x2d
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	e0a5      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 783 && min <= 799){
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	f240 320e 	movw	r2, #782	; 0x30e
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d906      	bls.n	8001ddc <HAL_getMin+0x3f4>
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001dd4:	d202      	bcs.n	8001ddc <HAL_getMin+0x3f4>
				//  printf("Minuto: 46 \n\r");
				  min1=46;
 8001dd6:	232e      	movs	r3, #46	; 0x2e
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	e099      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 800 && min <= 816){
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001de2:	d306      	bcc.n	8001df2 <HAL_getMin+0x40a>
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	f5b3 7f4c 	cmp.w	r3, #816	; 0x330
 8001dea:	d802      	bhi.n	8001df2 <HAL_getMin+0x40a>
				//  printf("Minuto: 47 \n\r");
				  min1=47;
 8001dec:	232f      	movs	r3, #47	; 0x2f
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	e08e      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 817 && min <= 833){
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	f5b3 7f4c 	cmp.w	r3, #816	; 0x330
 8001df8:	d907      	bls.n	8001e0a <HAL_getMin+0x422>
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	f240 3241 	movw	r2, #833	; 0x341
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d802      	bhi.n	8001e0a <HAL_getMin+0x422>
				//  printf("Minuto: 48 \n\r");
				  min1=48;
 8001e04:	2330      	movs	r3, #48	; 0x30
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	e082      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 834 && min <= 850){
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	f240 3241 	movw	r2, #833	; 0x341
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d907      	bls.n	8001e24 <HAL_getMin+0x43c>
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	f240 3252 	movw	r2, #850	; 0x352
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d802      	bhi.n	8001e24 <HAL_getMin+0x43c>
				//  printf("Minuto: 49 \n\r");
				  min1=49;
 8001e1e:	2331      	movs	r3, #49	; 0x31
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	e075      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 851 && min <= 867){
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	f240 3252 	movw	r2, #850	; 0x352
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d906      	bls.n	8001e3c <HAL_getMin+0x454>
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	f5b3 7f59 	cmp.w	r3, #868	; 0x364
 8001e34:	d202      	bcs.n	8001e3c <HAL_getMin+0x454>
				//  printf("Minuto: 50 \n\r");
				  min1=50;
 8001e36:	2332      	movs	r3, #50	; 0x32
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	e069      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 868 && min <= 884){
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	f5b3 7f59 	cmp.w	r3, #868	; 0x364
 8001e42:	d306      	bcc.n	8001e52 <HAL_getMin+0x46a>
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	f5b3 7f5d 	cmp.w	r3, #884	; 0x374
 8001e4a:	d802      	bhi.n	8001e52 <HAL_getMin+0x46a>
				//  printf("Minuto: 51 \n\r");
				  min1=51;
 8001e4c:	2333      	movs	r3, #51	; 0x33
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	e05e      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 885 && min <= 901){
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	f5b3 7f5d 	cmp.w	r3, #884	; 0x374
 8001e58:	d907      	bls.n	8001e6a <HAL_getMin+0x482>
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	f240 3285 	movw	r2, #901	; 0x385
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d802      	bhi.n	8001e6a <HAL_getMin+0x482>
				//  printf("Minuto: 52 \n\r");
				  min1=52;
 8001e64:	2334      	movs	r3, #52	; 0x34
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	e052      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 902 && min <= 918){
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	f240 3285 	movw	r2, #901	; 0x385
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d907      	bls.n	8001e84 <HAL_getMin+0x49c>
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	f240 3296 	movw	r2, #918	; 0x396
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d802      	bhi.n	8001e84 <HAL_getMin+0x49c>
				//  printf("Minuto: 53 \n\r");
				  min1=53;
 8001e7e:	2335      	movs	r3, #53	; 0x35
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	e045      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 919 && min <= 935){
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	f240 3296 	movw	r2, #918	; 0x396
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d906      	bls.n	8001e9c <HAL_getMin+0x4b4>
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	f5b3 7f6a 	cmp.w	r3, #936	; 0x3a8
 8001e94:	d202      	bcs.n	8001e9c <HAL_getMin+0x4b4>
				//  printf("Minuto: 54 \n\r");
				  min1=54;
 8001e96:	2336      	movs	r3, #54	; 0x36
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	e039      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 936 && min <= 952){
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	f5b3 7f6a 	cmp.w	r3, #936	; 0x3a8
 8001ea2:	d306      	bcc.n	8001eb2 <HAL_getMin+0x4ca>
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	f5b3 7f6e 	cmp.w	r3, #952	; 0x3b8
 8001eaa:	d802      	bhi.n	8001eb2 <HAL_getMin+0x4ca>
				 // printf("Minuto: 55 \n\r");
				  min1=55;
 8001eac:	2337      	movs	r3, #55	; 0x37
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	e02e      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 953 && min <= 969){
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	f5b3 7f6e 	cmp.w	r3, #952	; 0x3b8
 8001eb8:	d907      	bls.n	8001eca <HAL_getMin+0x4e2>
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	f240 32c9 	movw	r2, #969	; 0x3c9
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d802      	bhi.n	8001eca <HAL_getMin+0x4e2>
				//  printf("Minuto: 56 \n\r");
				  min1=56;
 8001ec4:	2338      	movs	r3, #56	; 0x38
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	e022      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 970 && min <= 986){
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	f240 32c9 	movw	r2, #969	; 0x3c9
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d907      	bls.n	8001ee4 <HAL_getMin+0x4fc>
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	f240 32da 	movw	r2, #986	; 0x3da
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d802      	bhi.n	8001ee4 <HAL_getMin+0x4fc>
				//  printf("Minuto: 57 \n\r");
				  min1=57;
 8001ede:	2339      	movs	r3, #57	; 0x39
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	e015      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 987 && min <= 1003){
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	f240 32da 	movw	r2, #986	; 0x3da
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d906      	bls.n	8001efc <HAL_getMin+0x514>
 8001eee:	88fb      	ldrh	r3, [r7, #6]
 8001ef0:	f5b3 7f7b 	cmp.w	r3, #1004	; 0x3ec
 8001ef4:	d202      	bcs.n	8001efc <HAL_getMin+0x514>
				//  printf("Minuto: 58 \n\r");
				  min1=58;
 8001ef6:	233a      	movs	r3, #58	; 0x3a
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e009      	b.n	8001f10 <HAL_getMin+0x528>
			  }
			  else if (min >= 1004 && min <= 1024){
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	f5b3 7f7b 	cmp.w	r3, #1004	; 0x3ec
 8001f02:	d305      	bcc.n	8001f10 <HAL_getMin+0x528>
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0a:	d801      	bhi.n	8001f10 <HAL_getMin+0x528>
				//  printf("Minuto: 59 \n\r");
				  min1=59;
 8001f0c:	233b      	movs	r3, #59	; 0x3b
 8001f0e:	60fb      	str	r3, [r7, #12]
			  }
	return min1;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	b2db      	uxtb	r3, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_RTC_SetTimePot>:
 */

#include "HAL_RTC.h"

void HAL_RTC_SetTimePot(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
	uint8_t hh, mm;

	hh = HAL_getHR(HAL_PotValue(POT1_CHANNEL));
 8001f26:	2000      	movs	r0, #0
 8001f28:	f7ff fc3f 	bl	80017aa <HAL_PotValue>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fc51 	bl	80017d6 <HAL_getHR>
 8001f34:	4603      	mov	r3, r0
 8001f36:	71fb      	strb	r3, [r7, #7]
	mm = HAL_getMin(HAL_PotValue(POT2_CHANNEL));
 8001f38:	2001      	movs	r0, #1
 8001f3a:	f7ff fc36 	bl	80017aa <HAL_PotValue>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff fd51 	bl	80019e8 <HAL_getMin>
 8001f46:	4603      	mov	r3, r0
 8001f48:	71bb      	strb	r3, [r7, #6]

	MX_RTC_SetTime(hh, mm);
 8001f4a:	79ba      	ldrb	r2, [r7, #6]
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f001 f8df 	bl	8003114 <MX_RTC_SetTime>
	return;
 8001f56:	bf00      	nop
}
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_RTC_Time2LCD>:

/*HAL_RTC_Time2LCD: User can decide whether to use a hh:mm or hh:mm:ss format.
 *Also, it is possible to move the digits around the display or set them
 *as DEFAULT, which will align the digits to the upper left corner*/
void HAL_RTC_Time2LCD(uint8_t page, uint8_t col, int HAL_RTC_FORMAT)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	603a      	str	r2, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	71bb      	strb	r3, [r7, #6]
	uint8_t hour, min, sec;

	MX_RTC_GetTime(&hour, &min, &sec);
 8001f70:	f107 021f 	add.w	r2, r7, #31
 8001f74:	f107 0120 	add.w	r1, r7, #32
 8001f78:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f001 f86b 	bl	8003058 <MX_RTC_GetTime>

	uint8_t sec_small = sec % 10;
 8001f82:	7ffa      	ldrb	r2, [r7, #31]
 8001f84:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <HAL_RTC_Time2LCD+0x140>)
 8001f86:	fba3 1302 	umull	r1, r3, r3, r2
 8001f8a:	08d9      	lsrs	r1, r3, #3
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t sec_big = sec/10;
 8001f9a:	7ffb      	ldrb	r3, [r7, #31]
 8001f9c:	4a40      	ldr	r2, [pc, #256]	; (80020a0 <HAL_RTC_Time2LCD+0x140>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	08db      	lsrs	r3, r3, #3
 8001fa4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t min_small = min % 10;
 8001fa8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001fac:	4b3c      	ldr	r3, [pc, #240]	; (80020a0 <HAL_RTC_Time2LCD+0x140>)
 8001fae:	fba3 1302 	umull	r1, r3, r3, r2
 8001fb2:	08d9      	lsrs	r1, r3, #3
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t min_big = min/10;
 8001fc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fc6:	4a36      	ldr	r2, [pc, #216]	; (80020a0 <HAL_RTC_Time2LCD+0x140>)
 8001fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fcc:	08db      	lsrs	r3, r3, #3
 8001fce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t hour_small = hour % 10;
 8001fd2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001fd6:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <HAL_RTC_Time2LCD+0x140>)
 8001fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fdc:	08d9      	lsrs	r1, r3, #3
 8001fde:	460b      	mov	r3, r1
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t hour_big = hour/10;
 8001fec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001ff0:	4a2b      	ldr	r2, [pc, #172]	; (80020a0 <HAL_RTC_Time2LCD+0x140>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	08db      	lsrs	r3, r3, #3
 8001ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	/*Build time array, add 48 to units to display the corresponding ascii number*/
	if(HAL_RTC_FORMAT == HAL_RTC_FORMAT_HHMMSS)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d128      	bne.n	8002054 <HAL_RTC_Time2LCD+0xf4>
	{
		uint8_t lcd_time[8] = {(hour_big+48), (hour_small+48), ':', (min_big+48), (min_small+48), ':', (sec_big+48), (sec_small+48)};
 8002002:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002006:	3330      	adds	r3, #48	; 0x30
 8002008:	b2db      	uxtb	r3, r3
 800200a:	753b      	strb	r3, [r7, #20]
 800200c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002010:	3330      	adds	r3, #48	; 0x30
 8002012:	b2db      	uxtb	r3, r3
 8002014:	757b      	strb	r3, [r7, #21]
 8002016:	233a      	movs	r3, #58	; 0x3a
 8002018:	75bb      	strb	r3, [r7, #22]
 800201a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800201e:	3330      	adds	r3, #48	; 0x30
 8002020:	b2db      	uxtb	r3, r3
 8002022:	75fb      	strb	r3, [r7, #23]
 8002024:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002028:	3330      	adds	r3, #48	; 0x30
 800202a:	b2db      	uxtb	r3, r3
 800202c:	763b      	strb	r3, [r7, #24]
 800202e:	233a      	movs	r3, #58	; 0x3a
 8002030:	767b      	strb	r3, [r7, #25]
 8002032:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002036:	3330      	adds	r3, #48	; 0x30
 8002038:	b2db      	uxtb	r3, r3
 800203a:	76bb      	strb	r3, [r7, #26]
 800203c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002040:	3330      	adds	r3, #48	; 0x30
 8002042:	b2db      	uxtb	r3, r3
 8002044:	76fb      	strb	r3, [r7, #27]
		HAL_LCD_print (lcd_time, page, col, 8);
 8002046:	79ba      	ldrb	r2, [r7, #6]
 8002048:	79f9      	ldrb	r1, [r7, #7]
 800204a:	f107 0014 	add.w	r0, r7, #20
 800204e:	2308      	movs	r3, #8
 8002050:	f7ff fa8e 	bl	8001570 <HAL_LCD_print>
	}
	if(HAL_RTC_FORMAT == HAL_RTC_FORMAT_HHMM)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d11d      	bne.n	8002096 <HAL_RTC_Time2LCD+0x136>
	{
		uint8_t lcd_time[5] = {(hour_big+48), (hour_small+48), ':', (min_big+48), (min_small+48)};
 800205a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800205e:	3330      	adds	r3, #48	; 0x30
 8002060:	b2db      	uxtb	r3, r3
 8002062:	733b      	strb	r3, [r7, #12]
 8002064:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002068:	3330      	adds	r3, #48	; 0x30
 800206a:	b2db      	uxtb	r3, r3
 800206c:	737b      	strb	r3, [r7, #13]
 800206e:	233a      	movs	r3, #58	; 0x3a
 8002070:	73bb      	strb	r3, [r7, #14]
 8002072:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002076:	3330      	adds	r3, #48	; 0x30
 8002078:	b2db      	uxtb	r3, r3
 800207a:	73fb      	strb	r3, [r7, #15]
 800207c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002080:	3330      	adds	r3, #48	; 0x30
 8002082:	b2db      	uxtb	r3, r3
 8002084:	743b      	strb	r3, [r7, #16]
		HAL_LCD_print (lcd_time, page, col, 5);
 8002086:	79ba      	ldrb	r2, [r7, #6]
 8002088:	79f9      	ldrb	r1, [r7, #7]
 800208a:	f107 000c 	add.w	r0, r7, #12
 800208e:	2305      	movs	r3, #5
 8002090:	f7ff fa6e 	bl	8001570 <HAL_LCD_print>
	}

	return;
 8002094:	bf00      	nop
 8002096:	bf00      	nop
}
 8002098:	3728      	adds	r7, #40	; 0x28
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	cccccccd 	.word	0xcccccccd

080020a4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80020ac:	4908      	ldr	r1, [pc, #32]	; (80020d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4013      	ands	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020c2:	68fb      	ldr	r3, [r7, #12]
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	40021000 	.word	0x40021000

080020d4 <LL_ADC_REG_SetSequencerRanks>:
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	3330      	adds	r3, #48	; 0x30
 80020e4:	4619      	mov	r1, r3
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ec:	f44f 7240 	mov.w	r2, #768	; 0x300
 80020f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	fa92 f2a2 	rbit	r2, r2
 80020f8:	617a      	str	r2, [r7, #20]
  return result;
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	fab2 f282 	clz	r2, r2
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	40d3      	lsrs	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	211f      	movs	r1, #31
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	401a      	ands	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	0e9b      	lsrs	r3, r3, #26
 8002122:	f003 011f 	and.w	r1, r3, #31
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	fa01 f303 	lsl.w	r3, r1, r3
 8002130:	431a      	orrs	r2, r3
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	601a      	str	r2, [r3, #0]
}
 8002136:	bf00      	nop
 8002138:	3724      	adds	r7, #36	; 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_ADC_SetChannelSamplingTime>:
{
 8002142:	b480      	push	{r7}
 8002144:	b08d      	sub	sp, #52	; 0x34
 8002146:	af00      	add	r7, sp, #0
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	3314      	adds	r3, #20
 8002152:	4619      	mov	r1, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800215e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	fa92 f2a2 	rbit	r2, r2
 8002166:	617a      	str	r2, [r7, #20]
  return result;
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	fab2 f282 	clz	r2, r2
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	40d3      	lsrs	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*preg,
 8002178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8002182:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8002186:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	6a39      	ldr	r1, [r7, #32]
 800218a:	fa91 f1a1 	rbit	r1, r1
 800218e:	61f9      	str	r1, [r7, #28]
  return result;
 8002190:	69f9      	ldr	r1, [r7, #28]
 8002192:	fab1 f181 	clz	r1, r1
 8002196:	b2c9      	uxtb	r1, r1
 8002198:	40cb      	lsrs	r3, r1
 800219a:	2107      	movs	r1, #7
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	401a      	ands	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80021aa:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80021ae:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021b2:	fa91 f1a1 	rbit	r1, r1
 80021b6:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80021b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ba:	fab1 f181 	clz	r1, r1
 80021be:	b2c9      	uxtb	r1, r1
 80021c0:	40cb      	lsrs	r3, r1
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	431a      	orrs	r2, r3
 80021ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021cc:	601a      	str	r2, [r3, #0]
}
 80021ce:	bf00      	nop
 80021d0:	3734      	adds	r7, #52	; 0x34
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <LL_ADC_SetChannelSingleDiff>:
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021ee:	68b9      	ldr	r1, [r7, #8]
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021f2:	400b      	ands	r3, r1
 80021f4:	43db      	mvns	r3, r3
 80021f6:	401a      	ands	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f003 0318 	and.w	r3, r3, #24
 80021fe:	4908      	ldr	r1, [pc, #32]	; (8002220 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002200:	40d9      	lsrs	r1, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	4019      	ands	r1, r3
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002208:	400b      	ands	r3, r1
 800220a:	431a      	orrs	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	0007fffe 	.word	0x0007fffe

08002224 <LL_ADC_EnableInternalRegulator>:
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002240:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002244:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	609a      	str	r2, [r3, #8]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_Enable>:
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002268:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800226c:	f043 0201 	orr.w	r2, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	609a      	str	r2, [r3, #8]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002292:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800229c:	4313      	orrs	r3, r2
 800229e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022c6:	bf0c      	ite	eq
 80022c8:	2301      	moveq	r3, #1
 80022ca:	2300      	movne	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022ee:	f043 0204 	orr.w	r2, r3, #4
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	b29b      	uxth	r3, r3
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b01      	cmp	r3, #1
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf0c      	ite	eq
 8002356:	2301      	moveq	r3, #1
 8002358:	2300      	movne	r3, #0
 800235a:	b2db      	uxtb	r3, r3
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2204      	movs	r2, #4
 8002374:	601a      	str	r2, [r3, #0]
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b094      	sub	sp, #80	; 0x50
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800238a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	60da      	str	r2, [r3, #12]
 80023a4:	611a      	str	r2, [r3, #16]
 80023a6:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80023a8:	f107 0318 	add.w	r3, r7, #24
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b6:	463b      	mov	r3, r7
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
 80023c4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 80023c6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80023ca:	f7ff fe6b 	bl	80020a4 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80023ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80023d2:	f7ff fe67 	bl	80020a4 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  PA1   ------> ADC1_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80023d6:	2303      	movs	r3, #3
 80023d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80023da:	2303      	movs	r3, #3
 80023dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	463b      	mov	r3, r7
 80023e4:	4619      	mov	r1, r3
 80023e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ea:	f7fe fadd 	bl	80009a8 <LL_GPIO_Init>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_10B;
 80023ee:	2308      	movs	r3, #8
 80023f0:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80023f2:	2300      	movs	r3, #0
 80023f4:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80023fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023fe:	4619      	mov	r1, r3
 8002400:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002404:	f7fd ff46 	bl	8000294 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002408:	2300      	movs	r3, #0
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002410:	2300      	movs	r3, #0
 8002412:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8002414:	2300      	movs	r3, #0
 8002416:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8002418:	2301      	movs	r3, #1
 800241a:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 800241c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002420:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002426:	4619      	mov	r1, r3
 8002428:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800242c:	f7fd ff58 	bl	80002e0 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV1;
 8002430:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002434:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800243a:	f107 0318 	add.w	r3, r7, #24
 800243e:	4619      	mov	r1, r3
 8002440:	481a      	ldr	r0, [pc, #104]	; (80024ac <MX_ADC1_Init+0x128>)
 8002442:	f7fd fee7 	bl	8000214 <LL_ADC_CommonInit>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8002446:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800244a:	f7ff feeb 	bl	8002224 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 800244e:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <MX_ADC1_Init+0x12c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	099b      	lsrs	r3, r3, #6
 8002454:	4a17      	ldr	r2, [pc, #92]	; (80024b4 <MX_ADC1_Init+0x130>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	099a      	lsrs	r2, r3, #6
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	461a      	mov	r2, r3
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <MX_ADC1_Init+0x134>)
 8002468:	fba3 2302 	umull	r2, r3, r3, r2
 800246c:	08db      	lsrs	r3, r3, #3
 800246e:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8002470:	e002      	b.n	8002478 <MX_ADC1_Init+0xf4>
  {
    wait_loop_index--;
 8002472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002474:	3b01      	subs	r3, #1
 8002476:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8002478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f9      	bne.n	8002472 <MX_ADC1_Init+0xee>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800247e:	4a0f      	ldr	r2, [pc, #60]	; (80024bc <MX_ADC1_Init+0x138>)
 8002480:	2106      	movs	r1, #6
 8002482:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002486:	f7ff fe25 	bl	80020d4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_601CYCLES_5);
 800248a:	2207      	movs	r2, #7
 800248c:	490b      	ldr	r1, [pc, #44]	; (80024bc <MX_ADC1_Init+0x138>)
 800248e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002492:	f7ff fe56 	bl	8002142 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8002496:	227f      	movs	r2, #127	; 0x7f
 8002498:	4908      	ldr	r1, [pc, #32]	; (80024bc <MX_ADC1_Init+0x138>)
 800249a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800249e:	f7ff fe9d 	bl	80021dc <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	3750      	adds	r7, #80	; 0x50
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	50000300 	.word	0x50000300
 80024b0:	20000300 	.word	0x20000300
 80024b4:	053e2d63 	.word	0x053e2d63
 80024b8:	cccccccd 	.word	0xcccccccd
 80024bc:	04300002 	.word	0x04300002

080024c0 <MX_ADC1_Calibration>:

	void MX_ADC1_Calibration(void){
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
	LL_ADC_StartCalibration(ADC1, LL_ADC_SINGLE_ENDED);
 80024c4:	217f      	movs	r1, #127	; 0x7f
 80024c6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024ca:	f7ff fed9 	bl	8002280 <LL_ADC_StartCalibration>

	while (LL_ADC_IsCalibrationOnGoing(ADC1))
 80024ce:	bf00      	nop
 80024d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024d4:	f7ff feed 	bl	80022b2 <LL_ADC_IsCalibrationOnGoing>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f8      	bne.n	80024d0 <MX_ADC1_Calibration+0x10>
	{}
	}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <MX_ADC1_Enable>:

	void MX_ADC1_Enable(void){
 80024e2:	b580      	push	{r7, lr}
 80024e4:	af00      	add	r7, sp, #0
	LL_ADC_Enable(ADC1);
 80024e6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024ea:	f7ff feb5 	bl	8002258 <LL_ADC_Enable>
	while(LL_ADC_IsActiveFlag_ADRDY(ADC1)==0)
 80024ee:	bf00      	nop
 80024f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024f4:	f7ff ff12 	bl	800231c <LL_ADC_IsActiveFlag_ADRDY>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f8      	beq.n	80024f0 <MX_ADC1_Enable+0xe>
	{}
	}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <MX_ADC1_SetChannel>:


	void MX_ADC1_SetChannel(uint32_t Channel){
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, ADC_ChannelMap[Channel]);
 800250c:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <MX_ADC1_SetChannel+0x40>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002514:	461a      	mov	r2, r3
 8002516:	2106      	movs	r1, #6
 8002518:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800251c:	f7ff fdda 	bl	80020d4 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, ADC_ChannelMap[Channel], ADC_Samplint_Time_Map[Channel]);
 8002520:	4a08      	ldr	r2, [pc, #32]	; (8002544 <MX_ADC1_SetChannel+0x40>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002528:	4a07      	ldr	r2, [pc, #28]	; (8002548 <MX_ADC1_SetChannel+0x44>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002530:	461a      	mov	r2, r3
 8002532:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002536:	f7ff fe04 	bl	8002142 <LL_ADC_SetChannelSamplingTime>
	}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	08003624 	.word	0x08003624
 8002548:	0800362c 	.word	0x0800362c

0800254c <MX_ADC1_StartConvertion>:

	void MX_ADC1_StartConvertion(void){
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC1);
 8002550:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002554:	f7ff fec1 	bl	80022da <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC1)==0)
 8002558:	bf00      	nop
 800255a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800255e:	f7ff fef0 	bl	8002342 <LL_ADC_IsActiveFlag_EOC>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f8      	beq.n	800255a <MX_ADC1_StartConvertion+0xe>
	{}
	LL_ADC_ClearFlag_EOC(ADC1);
 8002568:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800256c:	f7ff fefc 	bl	8002368 <LL_ADC_ClearFlag_EOC>

	}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}

08002574 <MX_ADC1_Value>:

	uint16_t MX_ADC1_Value(void){
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
	return LL_ADC_REG_ReadConversionData12(ADC1);
 8002578:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800257c:	f7ff fec1 	bl	8002302 <LL_ADC_REG_ReadConversionData12>
 8002580:	4603      	mov	r3, r0
	}
 8002582:	4618      	mov	r0, r3
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <LL_AHB1_GRP1_EnableClock>:
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002590:	4908      	ldr	r1, [pc, #32]	; (80025b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002592:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4313      	orrs	r3, r2
 800259a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4013      	ands	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025a6:	68fb      	ldr	r3, [r7, #12]
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	40021000 	.word	0x40021000

080025b8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80025b8:	b490      	push	{r4, r7}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80025c2:	4812      	ldr	r0, [pc, #72]	; (800260c <LL_SYSCFG_SetEXTISource+0x54>)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	4910      	ldr	r1, [pc, #64]	; (800260c <LL_SYSCFG_SetEXTISource+0x54>)
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	3202      	adds	r2, #2
 80025d0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	0c12      	lsrs	r2, r2, #16
 80025d8:	43d2      	mvns	r2, r2
 80025da:	4011      	ands	r1, r2
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	0c12      	lsrs	r2, r2, #16
 80025e0:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	fa92 f2a2 	rbit	r2, r2
 80025e8:	60ba      	str	r2, [r7, #8]
  return result;
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	fab2 f282 	clz	r2, r2
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	4614      	mov	r4, r2
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	40a2      	lsls	r2, r4
 80025f8:	430a      	orrs	r2, r1
 80025fa:	3302      	adds	r3, #2
 80025fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bc90      	pop	{r4, r7}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40010000 	.word	0x40010000

08002610 <LL_GPIO_SetPinMode>:
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	613b      	str	r3, [r7, #16]
  return result;
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2103      	movs	r1, #3
 8002638:	fa01 f303 	lsl.w	r3, r1, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	401a      	ands	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	61bb      	str	r3, [r7, #24]
  return result;
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	431a      	orrs	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	601a      	str	r2, [r3, #0]
}
 8002662:	bf00      	nop
 8002664:	3724      	adds	r7, #36	; 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <LL_GPIO_SetPinPull>:
{
 800266e:	b480      	push	{r7}
 8002670:	b089      	sub	sp, #36	; 0x24
 8002672:	af00      	add	r7, sp, #0
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	fa93 f3a3 	rbit	r3, r3
 8002688:	613b      	str	r3, [r7, #16]
  return result;
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	fab3 f383 	clz	r3, r3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	2103      	movs	r1, #3
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	401a      	ands	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	61bb      	str	r3, [r7, #24]
  return result;
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	431a      	orrs	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	60da      	str	r2, [r3, #12]
}
 80026c0:	bf00      	nop
 80026c2:	3724      	adds	r7, #36	; 0x24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <LL_GPIO_ResetOutputPin>:
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	; 0x28
 80026ec:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80026ee:	f107 031c 	add.w	r3, r7, #28
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
 8002708:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800270a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800270e:	f7ff ff3b 	bl	8002588 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8002712:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002716:	f7ff ff37 	bl	8002588 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800271a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800271e:	f7ff ff33 	bl	8002588 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002722:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002726:	f7ff ff2f 	bl	8002588 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6|LL_GPIO_PIN_8);
 800272a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800272e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002732:	f7ff ffcb 	bl	80026cc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8002736:	2140      	movs	r1, #64	; 0x40
 8002738:	4835      	ldr	r0, [pc, #212]	; (8002810 <MX_GPIO_Init+0x128>)
 800273a:	f7ff ffc7 	bl	80026cc <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800273e:	4935      	ldr	r1, [pc, #212]	; (8002814 <MX_GPIO_Init+0x12c>)
 8002740:	2002      	movs	r0, #2
 8002742:	f7ff ff39 	bl	80025b8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8002746:	2200      	movs	r2, #0
 8002748:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800274c:	4832      	ldr	r0, [pc, #200]	; (8002818 <MX_GPIO_Init+0x130>)
 800274e:	f7ff ff8e 	bl	800266e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8002752:	2200      	movs	r2, #0
 8002754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002758:	482f      	ldr	r0, [pc, #188]	; (8002818 <MX_GPIO_Init+0x130>)
 800275a:	f7ff ff59 	bl	8002610 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800275e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002762:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8002764:	2300      	movs	r3, #0
 8002766:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800276e:	2300      	movs	r3, #0
 8002770:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8002774:	2302      	movs	r3, #2
 8002776:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800277a:	f107 031c 	add.w	r3, r7, #28
 800277e:	4618      	mov	r0, r3
 8002780:	f7fd ff28 	bl	80005d4 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8002784:	2303      	movs	r3, #3
 8002786:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	4619      	mov	r1, r3
 8002794:	4820      	ldr	r0, [pc, #128]	; (8002818 <MX_GPIO_Init+0x130>)
 8002796:	f7fe f907 	bl	80009a8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800279a:	2310      	movs	r3, #16
 800279c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	4619      	mov	r1, r3
 80027aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ae:	f7fe f8fb 	bl	80009a8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_8;
 80027b2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80027b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80027b8:	2301      	movs	r3, #1
 80027ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	4619      	mov	r1, r3
 80027cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d0:	f7fe f8ea 	bl	80009a8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_5;
 80027d4:	2321      	movs	r3, #33	; 0x21
 80027d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80027d8:	2300      	movs	r3, #0
 80027da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	4619      	mov	r1, r3
 80027e4:	480a      	ldr	r0, [pc, #40]	; (8002810 <MX_GPIO_Init+0x128>)
 80027e6:	f7fe f8df 	bl	80009a8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80027ea:	2340      	movs	r3, #64	; 0x40
 80027ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80027ee:	2301      	movs	r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fe:	1d3b      	adds	r3, r7, #4
 8002800:	4619      	mov	r1, r3
 8002802:	4803      	ldr	r0, [pc, #12]	; (8002810 <MX_GPIO_Init+0x128>)
 8002804:	f7fe f8d0 	bl	80009a8 <LL_GPIO_Init>

}
 8002808:	bf00      	nop
 800280a:	3728      	adds	r7, #40	; 0x28
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	48000400 	.word	0x48000400
 8002814:	00f00003 	.word	0x00f00003
 8002818:	48000800 	.word	0x48000800

0800281c <digitalREAD>:
			GPIOF->MODER = pinOUTPUT_value;
			break;
	}
}

void digitalREAD (PORT_PIN PIN, GPIO_PORT PORT, JOYSTICK_POS *POS, bool *PRESSED){
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	60ba      	str	r2, [r7, #8]
 8002824:	607b      	str	r3, [r7, #4]
 8002826:	4603      	mov	r3, r0
 8002828:	81fb      	strh	r3, [r7, #14]
 800282a:	460b      	mov	r3, r1
 800282c:	737b      	strb	r3, [r7, #13]
	RIGHT, 1
	LEFT, 2
	UP, 3
	DOWN 4*/

	*PRESSED = FALSE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	701a      	strb	r2, [r3, #0]
	switch(PORT){
 8002834:	7b7b      	ldrb	r3, [r7, #13]
 8002836:	3b01      	subs	r3, #1
 8002838:	2b05      	cmp	r3, #5
 800283a:	d865      	bhi.n	8002908 <digitalREAD+0xec>
 800283c:	a201      	add	r2, pc, #4	; (adr r2, 8002844 <digitalREAD+0x28>)
 800283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002842:	bf00      	nop
 8002844:	0800285d 	.word	0x0800285d
 8002848:	08002881 	.word	0x08002881
 800284c:	080028af 	.word	0x080028af
 8002850:	080028dd 	.word	0x080028dd
 8002854:	08002911 	.word	0x08002911
 8002858:	080028f3 	.word	0x080028f3
		case A:
			if((GPIOA->IDR & PIN)==PIN) {
 800285c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	89fb      	ldrh	r3, [r7, #14]
 8002864:	401a      	ands	r2, r3
 8002866:	89fb      	ldrh	r3, [r7, #14]
 8002868:	429a      	cmp	r2, r3
 800286a:	d153      	bne.n	8002914 <digitalREAD+0xf8>
				*PRESSED = TRUE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
				if(PIN == PIN_4){
 8002872:	89fb      	ldrh	r3, [r7, #14]
 8002874:	2b10      	cmp	r3, #16
 8002876:	d14d      	bne.n	8002914 <digitalREAD+0xf8>
					*POS = UP;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2203      	movs	r2, #3
 800287c:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 800287e:	e049      	b.n	8002914 <digitalREAD+0xf8>
		case B:
			if((GPIOB->IDR & PIN)==PIN) {
 8002880:	4b2c      	ldr	r3, [pc, #176]	; (8002934 <digitalREAD+0x118>)
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	89fb      	ldrh	r3, [r7, #14]
 8002886:	401a      	ands	r2, r3
 8002888:	89fb      	ldrh	r3, [r7, #14]
 800288a:	429a      	cmp	r2, r3
 800288c:	d144      	bne.n	8002918 <digitalREAD+0xfc>
				*PRESSED = TRUE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
				if (PIN==PIN_5) {
 8002894:	89fb      	ldrh	r3, [r7, #14]
 8002896:	2b20      	cmp	r3, #32
 8002898:	d102      	bne.n	80028a0 <digitalREAD+0x84>
					*POS = CENTER;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
				}
				if (PIN==PIN_0) {
 80028a0:	89fb      	ldrh	r3, [r7, #14]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d138      	bne.n	8002918 <digitalREAD+0xfc>
					*POS = DOWN;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2204      	movs	r2, #4
 80028aa:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 80028ac:	e034      	b.n	8002918 <digitalREAD+0xfc>
		case C:
			if((GPIOC->IDR & PIN)==PIN) {
 80028ae:	4b22      	ldr	r3, [pc, #136]	; (8002938 <digitalREAD+0x11c>)
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	89fb      	ldrh	r3, [r7, #14]
 80028b4:	401a      	ands	r2, r3
 80028b6:	89fb      	ldrh	r3, [r7, #14]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d12f      	bne.n	800291c <digitalREAD+0x100>
				*PRESSED = TRUE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]
				if(PIN == PIN_0){
 80028c2:	89fb      	ldrh	r3, [r7, #14]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d102      	bne.n	80028ce <digitalREAD+0xb2>
					*POS = RIGHT;
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
				}
				if(PIN == PIN_1){
 80028ce:	89fb      	ldrh	r3, [r7, #14]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d123      	bne.n	800291c <digitalREAD+0x100>
					*POS = LEFT;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2202      	movs	r2, #2
 80028d8:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 80028da:	e01f      	b.n	800291c <digitalREAD+0x100>
		case D:
			if((GPIOD->IDR & PIN)==PIN)
 80028dc:	4b17      	ldr	r3, [pc, #92]	; (800293c <digitalREAD+0x120>)
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	89fb      	ldrh	r3, [r7, #14]
 80028e2:	401a      	ands	r2, r3
 80028e4:	89fb      	ldrh	r3, [r7, #14]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d11a      	bne.n	8002920 <digitalREAD+0x104>
			{
				*PRESSED = TRUE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
			}

			break;
 80028f0:	e016      	b.n	8002920 <digitalREAD+0x104>
		case E:
			break;
		case F:
			if((GPIOF->IDR & PIN)==PIN) *PRESSED = TRUE;
 80028f2:	4b13      	ldr	r3, [pc, #76]	; (8002940 <digitalREAD+0x124>)
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	89fb      	ldrh	r3, [r7, #14]
 80028f8:	401a      	ands	r2, r3
 80028fa:	89fb      	ldrh	r3, [r7, #14]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d111      	bne.n	8002924 <digitalREAD+0x108>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	701a      	strb	r2, [r3, #0]
			break;
 8002906:	e00d      	b.n	8002924 <digitalREAD+0x108>
		default:
			*PRESSED = FALSE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]
			break;
 800290e:	e00a      	b.n	8002926 <digitalREAD+0x10a>
			break;
 8002910:	bf00      	nop
 8002912:	e008      	b.n	8002926 <digitalREAD+0x10a>
			break;
 8002914:	bf00      	nop
 8002916:	e006      	b.n	8002926 <digitalREAD+0x10a>
			break;
 8002918:	bf00      	nop
 800291a:	e004      	b.n	8002926 <digitalREAD+0x10a>
			break;
 800291c:	bf00      	nop
 800291e:	e002      	b.n	8002926 <digitalREAD+0x10a>
			break;
 8002920:	bf00      	nop
 8002922:	e000      	b.n	8002926 <digitalREAD+0x10a>
			break;
 8002924:	bf00      	nop
	}
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	48000400 	.word	0x48000400
 8002938:	48000800 	.word	0x48000800
 800293c:	48000c00 	.word	0x48000c00
 8002940:	48001400 	.word	0x48001400

08002944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002960:	4013      	ands	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800296c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002976:	4a04      	ldr	r2, [pc, #16]	; (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	60d3      	str	r3, [r2, #12]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002990:	4a05      	ldr	r2, [pc, #20]	; (80029a8 <LL_RCC_HSI_Enable+0x1c>)
 8002992:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <LL_RCC_HSI_Enable+0x1c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6013      	str	r3, [r2, #0]
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000

080029ac <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <LL_RCC_HSI_IsReady+0x20>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	40021000 	.word	0x40021000

080029d0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80029d8:	4907      	ldr	r1, [pc, #28]	; (80029f8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000

080029fc <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a00:	4a05      	ldr	r2, [pc, #20]	; (8002a18 <LL_RCC_LSE_Enable+0x1c>)
 8002a02:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <LL_RCC_LSE_Enable+0x1c>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6213      	str	r3, [r2, #32]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000

08002a1c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002a24:	4906      	ldr	r1, [pc, #24]	; (8002a40 <LL_RCC_LSE_SetDriveCapability+0x24>)
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <LL_RCC_LSE_SetDriveCapability+0x24>)
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	f023 0218 	bic.w	r2, r3, #24
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	620b      	str	r3, [r1, #32]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	40021000 	.word	0x40021000

08002a44 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <LL_RCC_LSE_IsReady+0x20>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	40021000 	.word	0x40021000

08002a68 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a70:	4906      	ldr	r1, [pc, #24]	; (8002a8c <LL_RCC_SetSysClkSource+0x24>)
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <LL_RCC_SetSysClkSource+0x24>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f023 0203 	bic.w	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	40021000 	.word	0x40021000

08002a90 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <LL_RCC_GetSysClkSource+0x18>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 030c 	and.w	r3, r3, #12
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000

08002aac <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002ab4:	4906      	ldr	r1, [pc, #24]	; (8002ad0 <LL_RCC_SetAHBPrescaler+0x24>)
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <LL_RCC_SetAHBPrescaler+0x24>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	40021000 	.word	0x40021000

08002ad4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002adc:	4906      	ldr	r1, [pc, #24]	; (8002af8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002ade:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	604b      	str	r3, [r1, #4]
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	40021000 	.word	0x40021000

08002afc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b04:	4906      	ldr	r1, [pc, #24]	; (8002b20 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40021000 	.word	0x40021000

08002b24 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002b2c:	4906      	ldr	r1, [pc, #24]	; (8002b48 <LL_RCC_SetRTCClockSource+0x24>)
 8002b2e:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <LL_RCC_SetRTCClockSource+0x24>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	620b      	str	r3, [r1, #32]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40021000 	.word	0x40021000

08002b4c <LL_RCC_GetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSE
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <LL_RCC_GetRTCClockSource+0x18>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000

08002b68 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002b6c:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <LL_RCC_EnableRTC+0x1c>)
 8002b6e:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <LL_RCC_EnableRTC+0x1c>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b76:	6213      	str	r3, [r2, #32]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000

08002b88 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b8c:	4a05      	ldr	r2, [pc, #20]	; (8002ba4 <LL_RCC_ForceBackupDomainReset+0x1c>)
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <LL_RCC_ForceBackupDomainReset+0x1c>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b96:	6213      	str	r3, [r2, #32]
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000

08002ba8 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002bac:	4a05      	ldr	r2, [pc, #20]	; (8002bc4 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb6:	6213      	str	r3, [r2, #32]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000

08002bc8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002bd0:	4908      	ldr	r1, [pc, #32]	; (8002bf4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002bd4:	69da      	ldr	r2, [r3, #28]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4013      	ands	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002be6:	68fb      	ldr	r3, [r7, #12]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002c00:	4908      	ldr	r1, [pc, #32]	; (8002c24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002c0e:	699a      	ldr	r2, [r3, #24]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4013      	ands	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c16:	68fb      	ldr	r3, [r7, #12]
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	40021000 	.word	0x40021000

08002c28 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002c30:	4906      	ldr	r1, [pc, #24]	; (8002c4c <LL_FLASH_SetLatency+0x24>)
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <LL_FLASH_SetLatency+0x24>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 0207 	bic.w	r2, r3, #7
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	600b      	str	r3, [r1, #0]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	40022000 	.word	0x40022000

08002c50 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <LL_FLASH_GetLatency+0x18>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0307 	and.w	r3, r3, #7
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40022000 	.word	0x40022000

08002c6c <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c70:	4a05      	ldr	r2, [pc, #20]	; (8002c88 <LL_PWR_EnableBkUpAccess+0x1c>)
 8002c72:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <LL_PWR_EnableBkUpAccess+0x1c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7a:	6013      	str	r3, [r2, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40007000 	.word	0x40007000

08002c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b090      	sub	sp, #64	; 0x40
 8002c90:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002c92:	2001      	movs	r0, #1
 8002c94:	f7ff ffb0 	bl	8002bf8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002c98:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002c9c:	f7ff ff94 	bl	8002bc8 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ca0:	2007      	movs	r0, #7
 8002ca2:	f7ff fe4f 	bl	8002944 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ca6:	f000 f8d9 	bl	8002e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002caa:	f7ff fd1d 	bl	80026e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_LCD_Init();
 8002cae:	f7fe fd39 	bl	8001724 <HAL_LCD_Init>
  MX_RTC_Init();
 8002cb2:	f000 f98f 	bl	8002fd4 <MX_RTC_Init>
  HAL_Pot_Available();
 8002cb6:	f7fe fd6e 	bl	8001796 <HAL_Pot_Available>
  //HAL_startGPIO();


  //Display Welcome Message
  uint8_t message[7] = {'W', 'e', 'l', 'c', 'o', 'm','e'};
 8002cba:	4a62      	ldr	r2, [pc, #392]	; (8002e44 <main+0x1b8>)
 8002cbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002cc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cc4:	6018      	str	r0, [r3, #0]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	8019      	strh	r1, [r3, #0]
 8002cca:	3302      	adds	r3, #2
 8002ccc:	0c0a      	lsrs	r2, r1, #16
 8002cce:	701a      	strb	r2, [r3, #0]
  HAL_LCD_print(message, 1, 42, 7);
 8002cd0:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002cd4:	2307      	movs	r3, #7
 8002cd6:	222a      	movs	r2, #42	; 0x2a
 8002cd8:	2101      	movs	r1, #1
 8002cda:	f7fe fc49 	bl	8001570 <HAL_LCD_print>
  LL_mDelay(2000);
 8002cde:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ce2:	f7fe fae5 	bl	80012b0 <LL_mDelay>
  HAL_LCD_Clear();
 8002ce6:	f7fe fcd1 	bl	800168c <HAL_LCD_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Display Time
	 	  HAL_RTC_Time2LCD(HHMMSS_DEFAULT_PAGE, HHMMSS_DEFAULT_COL, HAL_RTC_FORMAT_HHMMSS);
 8002cea:	2201      	movs	r2, #1
 8002cec:	2148      	movs	r1, #72	; 0x48
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f7ff f936 	bl	8001f60 <HAL_RTC_Time2LCD>

	 	  	JOYSTICK_POS t1 = NULL2;
 8002cf4:	2305      	movs	r3, #5
 8002cf6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	 	  	  HAL_getPRESSED(B, &t1);
 8002cfa:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8002cfe:	4619      	mov	r1, r3
 8002d00:	2002      	movs	r0, #2
 8002d02:	f7fe fb09 	bl	8001318 <HAL_getPRESSED>
	 	  	  if(t1==CENTER){
 8002d06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d113      	bne.n	8002d36 <main+0xaa>
	 	  		HAL_LCD_Clear();
 8002d0e:	f7fe fcbd 	bl	800168c <HAL_LCD_Clear>
	 	  		uint8_t message[5] = {'E', 'n', 't', 'e', 'r'};
 8002d12:	4a4d      	ldr	r2, [pc, #308]	; (8002e48 <main+0x1bc>)
 8002d14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d1c:	6018      	str	r0, [r3, #0]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	7019      	strb	r1, [r3, #0]
	 	  		HAL_LCD_print(message, 2, 49, 5);
 8002d22:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002d26:	2305      	movs	r3, #5
 8002d28:	2231      	movs	r2, #49	; 0x31
 8002d2a:	2102      	movs	r1, #2
 8002d2c:	f7fe fc20 	bl	8001570 <HAL_LCD_print>
	 	  		LL_mDelay(200);
 8002d30:	20c8      	movs	r0, #200	; 0xc8
 8002d32:	f7fe fabd 	bl	80012b0 <LL_mDelay>
	 	  	  }
	 	  	  //}
	 	  	  if(t1 == DOWN){
 8002d36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d111      	bne.n	8002d62 <main+0xd6>
	 		  		HAL_LCD_Clear();
 8002d3e:	f7fe fca5 	bl	800168c <HAL_LCD_Clear>
	 	  		  	uint8_t message[10] = {'P', 'a', 's', 't', 'i', 'l', 'l', 'a', ' ', '3'};
 8002d42:	4a42      	ldr	r2, [pc, #264]	; (8002e4c <main+0x1c0>)
 8002d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d48:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d4a:	c303      	stmia	r3!, {r0, r1}
 8002d4c:	801a      	strh	r2, [r3, #0]
	 	  			HAL_LCD_print(message, 2, 34, 10);
 8002d4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002d52:	230a      	movs	r3, #10
 8002d54:	2222      	movs	r2, #34	; 0x22
 8002d56:	2102      	movs	r1, #2
 8002d58:	f7fe fc0a 	bl	8001570 <HAL_LCD_print>
	 		  		LL_mDelay(200);
 8002d5c:	20c8      	movs	r0, #200	; 0xc8
 8002d5e:	f7fe faa7 	bl	80012b0 <LL_mDelay>
	 	  	  }
	 	  	  HAL_getPRESSED(C, &t1);
 8002d62:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8002d66:	4619      	mov	r1, r3
 8002d68:	2003      	movs	r0, #3
 8002d6a:	f7fe fad5 	bl	8001318 <HAL_getPRESSED>
	 	  	  if(t1==RIGHT){
 8002d6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d134      	bne.n	8002de0 <main+0x154>
	 	  		  	HAL_getPRESSED(B, &t1);
 8002d76:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	2002      	movs	r0, #2
 8002d7e:	f7fe facb 	bl	8001318 <HAL_getPRESSED>
	 		  		HAL_LCD_Clear();
 8002d82:	f7fe fc83 	bl	800168c <HAL_LCD_Clear>
	 		  		uint8_t potchanged = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	 		  		uint8_t message[8] = {'S', 'e', 't', ' ', 't', 'i', 'm', 'e'};
 8002d8c:	4a30      	ldr	r2, [pc, #192]	; (8002e50 <main+0x1c4>)
 8002d8e:	f107 031c 	add.w	r3, r7, #28
 8002d92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d96:	e883 0003 	stmia.w	r3, {r0, r1}
	 		  		HAL_LCD_print(message, 2, 40, 8);
 8002d9a:	f107 001c 	add.w	r0, r7, #28
 8002d9e:	2308      	movs	r3, #8
 8002da0:	2228      	movs	r2, #40	; 0x28
 8002da2:	2102      	movs	r1, #2
 8002da4:	f7fe fbe4 	bl	8001570 <HAL_LCD_print>
	 		  		LL_mDelay(800);
 8002da8:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002dac:	f7fe fa80 	bl	80012b0 <LL_mDelay>

	 		  		while(t1 != CENTER){
 8002db0:	e007      	b.n	8002dc2 <main+0x136>
	 		  			HAL_getPRESSED(B, &t1);
 8002db2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8002db6:	4619      	mov	r1, r3
 8002db8:	2002      	movs	r0, #2
 8002dba:	f7fe faad 	bl	8001318 <HAL_getPRESSED>
	 		  			HAL_LCD_printPotUpdate();
 8002dbe:	f7fe fc09 	bl	80015d4 <HAL_LCD_printPotUpdate>
	 		  		while(t1 != CENTER){
 8002dc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f3      	bne.n	8002db2 <main+0x126>

	 		  		}
	 		  		potchanged = 1;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	 		  		if(potchanged == 1){
 8002dd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d103      	bne.n	8002de0 <main+0x154>
	 		  			HAL_RTC_SetTimePot();
 8002dd8:	f7ff f8a2 	bl	8001f20 <HAL_RTC_SetTimePot>
	 		  			HAL_LCD_Clear();
 8002ddc:	f7fe fc56 	bl	800168c <HAL_LCD_Clear>
	 		  		}
	 	  	  }
	 	  	  if(t1 == LEFT){
 8002de0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d111      	bne.n	8002e0c <main+0x180>
	 		  		HAL_LCD_Clear();
 8002de8:	f7fe fc50 	bl	800168c <HAL_LCD_Clear>
	 	  		  	uint8_t message[10] = {'P', 'a', 's', 't', 'i', 'l', 'l', 'a', ' ', '2'};
 8002dec:	4a19      	ldr	r2, [pc, #100]	; (8002e54 <main+0x1c8>)
 8002dee:	f107 0310 	add.w	r3, r7, #16
 8002df2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002df4:	c303      	stmia	r3!, {r0, r1}
 8002df6:	801a      	strh	r2, [r3, #0]
	 	  			HAL_LCD_print(message, 2, 34, 10);
 8002df8:	f107 0010 	add.w	r0, r7, #16
 8002dfc:	230a      	movs	r3, #10
 8002dfe:	2222      	movs	r2, #34	; 0x22
 8002e00:	2102      	movs	r1, #2
 8002e02:	f7fe fbb5 	bl	8001570 <HAL_LCD_print>
	 		  		LL_mDelay(200);
 8002e06:	20c8      	movs	r0, #200	; 0xc8
 8002e08:	f7fe fa52 	bl	80012b0 <LL_mDelay>
	 	  	  }
	 	  	  HAL_getPRESSED(A, &t1);
 8002e0c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8002e10:	4619      	mov	r1, r3
 8002e12:	2001      	movs	r0, #1
 8002e14:	f7fe fa80 	bl	8001318 <HAL_getPRESSED>
	 	  	  if(t1 == UP){
 8002e18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	f47f af64 	bne.w	8002cea <main+0x5e>
	 		  		HAL_LCD_Clear();
 8002e22:	f7fe fc33 	bl	800168c <HAL_LCD_Clear>
	 	  		  	uint8_t message[10] = {'P', 'a', 's', 't', 'i', 'l', 'l', 'a', ' ', '1'};
 8002e26:	4a0c      	ldr	r2, [pc, #48]	; (8002e58 <main+0x1cc>)
 8002e28:	1d3b      	adds	r3, r7, #4
 8002e2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e2c:	c303      	stmia	r3!, {r0, r1}
 8002e2e:	801a      	strh	r2, [r3, #0]
	 	  			HAL_LCD_print(message, 2, 34, 10);
 8002e30:	1d38      	adds	r0, r7, #4
 8002e32:	230a      	movs	r3, #10
 8002e34:	2222      	movs	r2, #34	; 0x22
 8002e36:	2102      	movs	r1, #2
 8002e38:	f7fe fb9a 	bl	8001570 <HAL_LCD_print>
	 		  		LL_mDelay(200);
 8002e3c:	20c8      	movs	r0, #200	; 0xc8
 8002e3e:	f7fe fa37 	bl	80012b0 <LL_mDelay>
  {
 8002e42:	e752      	b.n	8002cea <main+0x5e>
 8002e44:	080035e8 	.word	0x080035e8
 8002e48:	080035f0 	.word	0x080035f0
 8002e4c:	080035f8 	.word	0x080035f8
 8002e50:	08003604 	.word	0x08003604
 8002e54:	0800360c 	.word	0x0800360c
 8002e58:	08003618 	.word	0x08003618

08002e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002e60:	2000      	movs	r0, #0
 8002e62:	f7ff fee1 	bl	8002c28 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8002e66:	bf00      	nop
 8002e68:	f7ff fef2 	bl	8002c50 <LL_FLASH_GetLatency>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1fa      	bne.n	8002e68 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8002e72:	f7ff fd8b 	bl	800298c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002e76:	bf00      	nop
 8002e78:	f7ff fd98 	bl	80029ac <LL_RCC_HSI_IsReady>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d1fa      	bne.n	8002e78 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8002e82:	2010      	movs	r0, #16
 8002e84:	f7ff fda4 	bl	80029d0 <LL_RCC_HSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 8002e88:	f7ff fef0 	bl	8002c6c <LL_PWR_EnableBkUpAccess>
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)
 8002e8c:	f7ff fe5e 	bl	8002b4c <LL_RCC_GetRTCClockSource>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e96:	d003      	beq.n	8002ea0 <SystemClock_Config+0x44>
  {
    LL_RCC_ForceBackupDomainReset();
 8002e98:	f7ff fe76 	bl	8002b88 <LL_RCC_ForceBackupDomainReset>
    LL_RCC_ReleaseBackupDomainReset();
 8002e9c:	f7ff fe84 	bl	8002ba8 <LL_RCC_ReleaseBackupDomainReset>
  }
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f7ff fdbb 	bl	8002a1c <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 8002ea6:	f7ff fda9 	bl	80029fc <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8002eaa:	bf00      	nop
 8002eac:	f7ff fdca 	bl	8002a44 <LL_RCC_LSE_IsReady>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d1fa      	bne.n	8002eac <SystemClock_Config+0x50>
  {

  }
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)
 8002eb6:	f7ff fe49 	bl	8002b4c <LL_RCC_GetRTCClockSource>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec0:	d003      	beq.n	8002eca <SystemClock_Config+0x6e>
  {
    LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
 8002ec2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002ec6:	f7ff fe2d 	bl	8002b24 <LL_RCC_SetRTCClockSource>
  }
  LL_RCC_EnableRTC();
 8002eca:	f7ff fe4d 	bl	8002b68 <LL_RCC_EnableRTC>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_4);
 8002ece:	2090      	movs	r0, #144	; 0x90
 8002ed0:	f7ff fdec 	bl	8002aac <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8002ed4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ed8:	f7ff fdfc 	bl	8002ad4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002edc:	2000      	movs	r0, #0
 8002ede:	f7ff fe0d 	bl	8002afc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f7ff fdc0 	bl	8002a68 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8002ee8:	bf00      	nop
 8002eea:	f7ff fdd1 	bl	8002a90 <LL_RCC_GetSysClkSource>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1fa      	bne.n	8002eea <SystemClock_Config+0x8e>
  {

  }
  LL_Init1msTick(2000000);
 8002ef4:	4803      	ldr	r0, [pc, #12]	; (8002f04 <SystemClock_Config+0xa8>)
 8002ef6:	f7fe f9cd 	bl	8001294 <LL_Init1msTick>
  LL_SetSystemCoreClock(2000000);
 8002efa:	4802      	ldr	r0, [pc, #8]	; (8002f04 <SystemClock_Config+0xa8>)
 8002efc:	f7fe f9fc 	bl	80012f8 <LL_SetSystemCoreClock>
}
 8002f00:	bf00      	nop
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	001e8480 	.word	0x001e8480

08002f08 <LL_RCC_EnableRTC>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002f0c:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <LL_RCC_EnableRTC+0x1c>)
 8002f0e:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <LL_RCC_EnableRTC+0x1c>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f16:	6213      	str	r3, [r2, #32]
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40021000 	.word	0x40021000

08002f28 <LL_RTC_SetAsynchPrescaler>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	041b      	lsls	r3, r3, #16
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	611a      	str	r2, [r3, #16]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_RTC_SetSynchPrescaler>:
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	611a      	str	r2, [r3, #16]
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <LL_RTC_TIME_GetHour>:
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU))) >> RTC_TR_HU_Pos);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	0c1b      	lsrs	r3, r3, #16
 8002f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <LL_RTC_TIME_GetMinute>:
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0a1b      	lsrs	r3, r3, #8
 8002fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <LL_RTC_TIME_GetSecond>:
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <MX_RTC_Init>:

/* USER CODE END 0 */

/* RTC init function */
void MX_RTC_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8002fda:	f107 030c 	add.w	r3, r7, #12
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	605a      	str	r2, [r3, #4]
 8002fe4:	609a      	str	r2, [r3, #8]

  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 8002fe6:	f7ff ff8f 	bl	8002f08 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
  RTC_InitStruct.AsynchPrescaler = 127;
 8002fee:	237f      	movs	r3, #127	; 0x7f
 8002ff0:	613b      	str	r3, [r7, #16]
  RTC_InitStruct.SynchPrescaler = 255;
 8002ff2:	23ff      	movs	r3, #255	; 0xff
 8002ff4:	617b      	str	r3, [r7, #20]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8002ff6:	f107 030c 	add.w	r3, r7, #12
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4815      	ldr	r0, [pc, #84]	; (8003054 <MX_RTC_Init+0x80>)
 8002ffe:	f7fd fe75 	bl	8000cec <LL_RTC_Init>
  LL_RTC_SetAsynchPrescaler(RTC, 127);
 8003002:	217f      	movs	r1, #127	; 0x7f
 8003004:	4813      	ldr	r0, [pc, #76]	; (8003054 <MX_RTC_Init+0x80>)
 8003006:	f7ff ff8f 	bl	8002f28 <LL_RTC_SetAsynchPrescaler>
  LL_RTC_SetSynchPrescaler(RTC, 255);
 800300a:	21ff      	movs	r1, #255	; 0xff
 800300c:	4811      	ldr	r0, [pc, #68]	; (8003054 <MX_RTC_Init+0x80>)
 800300e:	f7ff ff9f 	bl	8002f50 <LL_RTC_SetSynchPrescaler>
  /* USER CODE BEGIN RTC_Init 2 */

  LL_RTC_DateTypeDef RTC_DateStruct = {0};
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
  LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8003016:	463b      	mov	r3, r7
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]

  LL_RTC_DATE_StructInit(&RTC_DateStruct);
 800301e:	f107 0308 	add.w	r3, r7, #8
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd fff2 	bl	800100c <LL_RTC_DATE_StructInit>
  LL_RTC_TIME_StructInit(&RTC_TimeStruct);
 8003028:	463b      	mov	r3, r7
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd ff34 	bl	8000e98 <LL_RTC_TIME_StructInit>

  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8003030:	f107 0308 	add.w	r3, r7, #8
 8003034:	461a      	mov	r2, r3
 8003036:	2100      	movs	r1, #0
 8003038:	4806      	ldr	r0, [pc, #24]	; (8003054 <MX_RTC_Init+0x80>)
 800303a:	f7fd ff43 	bl	8000ec4 <LL_RTC_DATE_Init>
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 800303e:	463b      	mov	r3, r7
 8003040:	461a      	mov	r2, r3
 8003042:	2100      	movs	r1, #0
 8003044:	4803      	ldr	r0, [pc, #12]	; (8003054 <MX_RTC_Init+0x80>)
 8003046:	f7fd fe81 	bl	8000d4c <LL_RTC_TIME_Init>

  /* USER CODE END RTC_Init 2 */

}
 800304a:	bf00      	nop
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40002800 	.word	0x40002800

08003058 <MX_RTC_GetTime>:

	return;
}

void MX_RTC_GetTime(uint8_t *hh, uint8_t *mm, uint8_t *ss)
{
 8003058:	b590      	push	{r4, r7, lr}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
	*hh = __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC)) ;
 8003064:	482a      	ldr	r0, [pc, #168]	; (8003110 <MX_RTC_GetTime+0xb8>)
 8003066:	f7ff ff88 	bl	8002f7a <LL_RTC_TIME_GetHour>
 800306a:	4603      	mov	r3, r0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	111b      	asrs	r3, r3, #4
 8003070:	b2db      	uxtb	r3, r3
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	b2db      	uxtb	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	0092      	lsls	r2, r2, #2
 800307c:	4413      	add	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	b2dc      	uxtb	r4, r3
 8003082:	4823      	ldr	r0, [pc, #140]	; (8003110 <MX_RTC_GetTime+0xb8>)
 8003084:	f7ff ff79 	bl	8002f7a <LL_RTC_TIME_GetHour>
 8003088:	4603      	mov	r3, r0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	b2db      	uxtb	r3, r3
 8003092:	4423      	add	r3, r4
 8003094:	b2da      	uxtb	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	701a      	strb	r2, [r3, #0]
	*mm = __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 800309a:	481d      	ldr	r0, [pc, #116]	; (8003110 <MX_RTC_GetTime+0xb8>)
 800309c:	f7ff ff7c 	bl	8002f98 <LL_RTC_TIME_GetMinute>
 80030a0:	4603      	mov	r3, r0
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	111b      	asrs	r3, r3, #4
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	461a      	mov	r2, r3
 80030b0:	0092      	lsls	r2, r2, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	b2dc      	uxtb	r4, r3
 80030b8:	4815      	ldr	r0, [pc, #84]	; (8003110 <MX_RTC_GetTime+0xb8>)
 80030ba:	f7ff ff6d 	bl	8002f98 <LL_RTC_TIME_GetMinute>
 80030be:	4603      	mov	r3, r0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	4423      	add	r3, r4
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	701a      	strb	r2, [r3, #0]
	*ss = __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80030d0:	480f      	ldr	r0, [pc, #60]	; (8003110 <MX_RTC_GetTime+0xb8>)
 80030d2:	f7ff ff70 	bl	8002fb6 <LL_RTC_TIME_GetSecond>
 80030d6:	4603      	mov	r3, r0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	111b      	asrs	r3, r3, #4
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	0092      	lsls	r2, r2, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	b2dc      	uxtb	r4, r3
 80030ee:	4808      	ldr	r0, [pc, #32]	; (8003110 <MX_RTC_GetTime+0xb8>)
 80030f0:	f7ff ff61 	bl	8002fb6 <LL_RTC_TIME_GetSecond>
 80030f4:	4603      	mov	r3, r0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	4423      	add	r3, r4
 8003100:	b2da      	uxtb	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	701a      	strb	r2, [r3, #0]

	return;
 8003106:	bf00      	nop
}
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	bd90      	pop	{r4, r7, pc}
 800310e:	bf00      	nop
 8003110:	40002800 	.word	0x40002800

08003114 <MX_RTC_SetTime>:

	return;
}

void MX_RTC_SetTime(uint8_t hh, uint8_t mm)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	460a      	mov	r2, r1
 800311e:	71fb      	strb	r3, [r7, #7]
 8003120:	4613      	mov	r3, r2
 8003122:	71bb      	strb	r3, [r7, #6]
	  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	609a      	str	r2, [r3, #8]
	  LL_RCC_EnableRTC();
 8003130:	f7ff feea 	bl	8002f08 <LL_RCC_EnableRTC>

	  RTC -> CR |= RTC_CR_BYPSHAD;
 8003134:	4a18      	ldr	r2, [pc, #96]	; (8003198 <MX_RTC_SetTime+0x84>)
 8003136:	4b18      	ldr	r3, [pc, #96]	; (8003198 <MX_RTC_SetTime+0x84>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f043 0320 	orr.w	r3, r3, #32
 800313e:	6093      	str	r3, [r2, #8]

	  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
	  RTC_InitStruct.AsynchPrescaler = 127;
 8003144:	237f      	movs	r3, #127	; 0x7f
 8003146:	61bb      	str	r3, [r7, #24]
	  RTC_InitStruct.SynchPrescaler = 255;
 8003148:	23ff      	movs	r3, #255	; 0xff
 800314a:	61fb      	str	r3, [r7, #28]
	  LL_RTC_Init(RTC, &RTC_InitStruct);
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	4619      	mov	r1, r3
 8003152:	4811      	ldr	r0, [pc, #68]	; (8003198 <MX_RTC_SetTime+0x84>)
 8003154:	f7fd fdca 	bl	8000cec <LL_RTC_Init>
	  LL_RTC_SetAsynchPrescaler(RTC, 127);
 8003158:	217f      	movs	r1, #127	; 0x7f
 800315a:	480f      	ldr	r0, [pc, #60]	; (8003198 <MX_RTC_SetTime+0x84>)
 800315c:	f7ff fee4 	bl	8002f28 <LL_RTC_SetAsynchPrescaler>
	  LL_RTC_SetSynchPrescaler(RTC, 255);
 8003160:	21ff      	movs	r1, #255	; 0xff
 8003162:	480d      	ldr	r0, [pc, #52]	; (8003198 <MX_RTC_SetTime+0x84>)
 8003164:	f7ff fef4 	bl	8002f50 <LL_RTC_SetSynchPrescaler>

	  LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8003168:	f107 030c 	add.w	r3, r7, #12
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]

	  Update_TR(&RTC_TimeStruct, hh, mm);
 8003172:	79ba      	ldrb	r2, [r7, #6]
 8003174:	79f9      	ldrb	r1, [r7, #7]
 8003176:	f107 030c 	add.w	r3, r7, #12
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f80e 	bl	800319c <Update_TR>

	  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 8003180:	f107 030c 	add.w	r3, r7, #12
 8003184:	461a      	mov	r2, r3
 8003186:	2100      	movs	r1, #0
 8003188:	4803      	ldr	r0, [pc, #12]	; (8003198 <MX_RTC_SetTime+0x84>)
 800318a:	f7fd fddf 	bl	8000d4c <LL_RTC_TIME_Init>

	  return;
 800318e:	bf00      	nop
}
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40002800 	.word	0x40002800

0800319c <Update_TR>:

void Update_TR(LL_RTC_TimeTypeDef *RTC_TimeStruct, uint8_t hour, uint8_t min)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	70fb      	strb	r3, [r7, #3]
 80031a8:	4613      	mov	r3, r2
 80031aa:	70bb      	strb	r3, [r7, #2]
	RTC_TimeStruct->TimeFormat = LL_RTC_TIME_FORMAT_AM_OR_24;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
	RTC_TimeStruct->Hours = hour;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	711a      	strb	r2, [r3, #4]
	RTC_TimeStruct->Minutes = min;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	78ba      	ldrb	r2, [r7, #2]
 80031bc:	715a      	strb	r2, [r3, #5]
	RTC_TimeStruct->Seconds = 0x00;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	719a      	strb	r2, [r3, #6]

	return;
 80031c4:	bf00      	nop
}
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <LL_AHB1_GRP1_EnableClock>:
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80031d8:	4908      	ldr	r1, [pc, #32]	; (80031fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80031e6:	695a      	ldr	r2, [r3, #20]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4013      	ands	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031ee:	68fb      	ldr	r3, [r7, #12]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	40021000 	.word	0x40021000

08003200 <LL_APB2_GRP1_EnableClock>:
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003208:	4908      	ldr	r1, [pc, #32]	; (800322c <LL_APB2_GRP1_EnableClock+0x2c>)
 800320a:	4b08      	ldr	r3, [pc, #32]	; (800322c <LL_APB2_GRP1_EnableClock+0x2c>)
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4313      	orrs	r3, r2
 8003212:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003216:	699a      	ldr	r2, [r3, #24]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4013      	ands	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800321e:	68fb      	ldr	r3, [r7, #12]
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	40021000 	.word	0x40021000

08003230 <LL_SPI_Enable>:
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	601a      	str	r2, [r3, #0]
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <LL_SPI_SetStandard>:
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f023 0210 	bic.w	r2, r3, #16
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	605a      	str	r2, [r3, #4]
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <LL_SPI_SetRxFIFOThreshold>:
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	605a      	str	r2, [r3, #4]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f023 0208 	bic.w	r2, r3, #8
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	605a      	str	r2, [r3, #4]
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d101      	bne.n	80032d4 <LL_SPI_IsActiveFlag_TXE+0x18>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f2:	2b80      	cmp	r3, #128	; 0x80
 80032f4:	d101      	bne.n	80032fa <LL_SPI_IsActiveFlag_BSY+0x18>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <LL_SPI_IsActiveFlag_BSY+0x1a>
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	330c      	adds	r3, #12
 8003318:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <LL_GPIO_SetOutputPin>:
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	619a      	str	r2, [r3, #24]
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <LL_GPIO_ResetOutputPin>:
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b090      	sub	sp, #64	; 0x40
 8003368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800336a:	f107 0318 	add.w	r3, r7, #24
 800336e:	2228      	movs	r2, #40	; 0x28
 8003370:	2100      	movs	r1, #0
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f924 	bl	80035c0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003378:	463b      	mov	r3, r7
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	605a      	str	r2, [r3, #4]
 8003380:	609a      	str	r2, [r3, #8]
 8003382:	60da      	str	r2, [r3, #12]
 8003384:	611a      	str	r2, [r3, #16]
 8003386:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003388:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800338c:	f7ff ff38 	bl	8003200 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003390:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003394:	f7ff ff1c 	bl	80031d0 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 8003398:	23a0      	movs	r3, #160	; 0xa0
 800339a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800339c:	2302      	movs	r3, #2
 800339e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80033a0:	2303      	movs	r3, #3
 80033a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80033ac:	2305      	movs	r3, #5
 80033ae:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b0:	463b      	mov	r3, r7
 80033b2:	4619      	mov	r1, r3
 80033b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033b8:	f7fd faf6 	bl	80009a8 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80033bc:	2300      	movs	r3, #0
 80033be:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80033c0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80033c4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80033c6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80033ca:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80033cc:	2302      	movs	r3, #2
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80033d0:	2301      	movs	r3, #1
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80033d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80033da:	2308      	movs	r3, #8
 80033dc:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80033de:	2300      	movs	r3, #0
 80033e0:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80033e6:	2307      	movs	r3, #7
 80033e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80033ea:	f107 0318 	add.w	r3, r7, #24
 80033ee:	4619      	mov	r1, r3
 80033f0:	480a      	ldr	r0, [pc, #40]	; (800341c <MX_SPI1_Init+0xb8>)
 80033f2:	f7fd fedd 	bl	80011b0 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80033f6:	2100      	movs	r1, #0
 80033f8:	4808      	ldr	r0, [pc, #32]	; (800341c <MX_SPI1_Init+0xb8>)
 80033fa:	f7ff ff29 	bl	8003250 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 80033fe:	4807      	ldr	r0, [pc, #28]	; (800341c <MX_SPI1_Init+0xb8>)
 8003400:	f7ff ff4c 	bl	800329c <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  LL_SPI_SetRxFIFOThreshold(SPI1, LL_SPI_RX_FIFO_TH_QUARTER);
 8003404:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003408:	4804      	ldr	r0, [pc, #16]	; (800341c <MX_SPI1_Init+0xb8>)
 800340a:	f7ff ff34 	bl	8003276 <LL_SPI_SetRxFIFOThreshold>
  MX_SPI1_Enable();
 800340e:	f000 f807 	bl	8003420 <MX_SPI1_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 8003412:	bf00      	nop
 8003414:	3740      	adds	r7, #64	; 0x40
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40013000 	.word	0x40013000

08003420 <MX_SPI1_Enable>:

/* USER CODE BEGIN 1 */

void MX_SPI1_Enable(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
	LL_SPI_Enable(SPI1);
 8003424:	4802      	ldr	r0, [pc, #8]	; (8003430 <MX_SPI1_Enable+0x10>)
 8003426:	f7ff ff03 	bl	8003230 <LL_SPI_Enable>
	return;
 800342a:	bf00      	nop
}
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40013000 	.word	0x40013000

08003434 <MX_SPI1_CSlow>:
	LL_SPI_Disable(SPI1);
	return;
}

void MX_SPI1_CSlow(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6); //Chip Select Low
 8003438:	2140      	movs	r1, #64	; 0x40
 800343a:	4802      	ldr	r0, [pc, #8]	; (8003444 <MX_SPI1_CSlow+0x10>)
 800343c:	f7ff ff84 	bl	8003348 <LL_GPIO_ResetOutputPin>
	return;
 8003440:	bf00      	nop
}
 8003442:	bd80      	pop	{r7, pc}
 8003444:	48000400 	.word	0x48000400

08003448 <MX_SPI1_CShigh>:

void MX_SPI1_CShigh(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6); //Chip Select High
 800344c:	2140      	movs	r1, #64	; 0x40
 800344e:	4802      	ldr	r0, [pc, #8]	; (8003458 <MX_SPI1_CShigh+0x10>)
 8003450:	f7ff ff6c 	bl	800332c <LL_GPIO_SetOutputPin>
	return;
 8003454:	bf00      	nop
}
 8003456:	bd80      	pop	{r7, pc}
 8003458:	48000400 	.word	0x48000400

0800345c <MX_SPI1_Send>:

void MX_SPI1_Send(uint8_t tx)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_BSY(SPI1));
 8003466:	bf00      	nop
 8003468:	480e      	ldr	r0, [pc, #56]	; (80034a4 <MX_SPI1_Send+0x48>)
 800346a:	f7ff ff3a 	bl	80032e2 <LL_SPI_IsActiveFlag_BSY>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f9      	bne.n	8003468 <MX_SPI1_Send+0xc>
	LL_SPI_TransmitData8(SPI1, tx);
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	4619      	mov	r1, r3
 8003478:	480a      	ldr	r0, [pc, #40]	; (80034a4 <MX_SPI1_Send+0x48>)
 800347a:	f7ff ff45 	bl	8003308 <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_TXE(SPI1));
 800347e:	bf00      	nop
 8003480:	4808      	ldr	r0, [pc, #32]	; (80034a4 <MX_SPI1_Send+0x48>)
 8003482:	f7ff ff1b 	bl	80032bc <LL_SPI_IsActiveFlag_TXE>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f9      	beq.n	8003480 <MX_SPI1_Send+0x24>
	while(LL_SPI_IsActiveFlag_BSY(SPI1));
 800348c:	bf00      	nop
 800348e:	4805      	ldr	r0, [pc, #20]	; (80034a4 <MX_SPI1_Send+0x48>)
 8003490:	f7ff ff27 	bl	80032e2 <LL_SPI_IsActiveFlag_BSY>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f9      	bne.n	800348e <MX_SPI1_Send+0x32>

	return;
 800349a:	bf00      	nop
}
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40013000 	.word	0x40013000

080034a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034ac:	e7fe      	b.n	80034ac <NMI_Handler+0x4>

080034ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ae:	b480      	push	{r7}
 80034b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034b2:	e7fe      	b.n	80034b2 <HardFault_Handler+0x4>

080034b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034b8:	e7fe      	b.n	80034b8 <MemManage_Handler+0x4>

080034ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034ba:	b480      	push	{r7}
 80034bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034be:	e7fe      	b.n	80034be <BusFault_Handler+0x4>

080034c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034c4:	e7fe      	b.n	80034c4 <UsageFault_Handler+0x4>

080034c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034c6:	b480      	push	{r7}
 80034c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034d8:	bf00      	nop
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034e2:	b480      	push	{r7}
 80034e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003504:	4a06      	ldr	r2, [pc, #24]	; (8003520 <SystemInit+0x20>)
 8003506:	4b06      	ldr	r3, [pc, #24]	; (8003520 <SystemInit+0x20>)
 8003508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003514:	bf00      	nop
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000ed00 	.word	0xe000ed00

08003524 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800355c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003528:	480d      	ldr	r0, [pc, #52]	; (8003560 <LoopForever+0x6>)
  ldr r1, =_edata
 800352a:	490e      	ldr	r1, [pc, #56]	; (8003564 <LoopForever+0xa>)
  ldr r2, =_sidata
 800352c:	4a0e      	ldr	r2, [pc, #56]	; (8003568 <LoopForever+0xe>)
  movs r3, #0
 800352e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003530:	e002      	b.n	8003538 <LoopCopyDataInit>

08003532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003536:	3304      	adds	r3, #4

08003538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800353a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800353c:	d3f9      	bcc.n	8003532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800353e:	4a0b      	ldr	r2, [pc, #44]	; (800356c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003540:	4c0b      	ldr	r4, [pc, #44]	; (8003570 <LoopForever+0x16>)
  movs r3, #0
 8003542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003544:	e001      	b.n	800354a <LoopFillZerobss>

08003546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003548:	3204      	adds	r2, #4

0800354a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800354a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800354c:	d3fb      	bcc.n	8003546 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800354e:	f7ff ffd7 	bl	8003500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003552:	f000 f811 	bl	8003578 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003556:	f7ff fb99 	bl	8002c8c <main>

0800355a <LoopForever>:

LoopForever:
    b LoopForever
 800355a:	e7fe      	b.n	800355a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800355c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8003560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003564:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 8003568:	0800363c 	.word	0x0800363c
  ldr r2, =_sbss
 800356c:	20000304 	.word	0x20000304
  ldr r4, =_ebss
 8003570:	20000320 	.word	0x20000320

08003574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003574:	e7fe      	b.n	8003574 <ADC1_2_IRQHandler>
	...

08003578 <__libc_init_array>:
 8003578:	b570      	push	{r4, r5, r6, lr}
 800357a:	4e0d      	ldr	r6, [pc, #52]	; (80035b0 <__libc_init_array+0x38>)
 800357c:	4c0d      	ldr	r4, [pc, #52]	; (80035b4 <__libc_init_array+0x3c>)
 800357e:	1ba4      	subs	r4, r4, r6
 8003580:	10a4      	asrs	r4, r4, #2
 8003582:	2500      	movs	r5, #0
 8003584:	42a5      	cmp	r5, r4
 8003586:	d109      	bne.n	800359c <__libc_init_array+0x24>
 8003588:	4e0b      	ldr	r6, [pc, #44]	; (80035b8 <__libc_init_array+0x40>)
 800358a:	4c0c      	ldr	r4, [pc, #48]	; (80035bc <__libc_init_array+0x44>)
 800358c:	f000 f820 	bl	80035d0 <_init>
 8003590:	1ba4      	subs	r4, r4, r6
 8003592:	10a4      	asrs	r4, r4, #2
 8003594:	2500      	movs	r5, #0
 8003596:	42a5      	cmp	r5, r4
 8003598:	d105      	bne.n	80035a6 <__libc_init_array+0x2e>
 800359a:	bd70      	pop	{r4, r5, r6, pc}
 800359c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035a0:	4798      	blx	r3
 80035a2:	3501      	adds	r5, #1
 80035a4:	e7ee      	b.n	8003584 <__libc_init_array+0xc>
 80035a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035aa:	4798      	blx	r3
 80035ac:	3501      	adds	r5, #1
 80035ae:	e7f2      	b.n	8003596 <__libc_init_array+0x1e>
 80035b0:	08003634 	.word	0x08003634
 80035b4:	08003634 	.word	0x08003634
 80035b8:	08003634 	.word	0x08003634
 80035bc:	08003638 	.word	0x08003638

080035c0 <memset>:
 80035c0:	4402      	add	r2, r0
 80035c2:	4603      	mov	r3, r0
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d100      	bne.n	80035ca <memset+0xa>
 80035c8:	4770      	bx	lr
 80035ca:	f803 1b01 	strb.w	r1, [r3], #1
 80035ce:	e7f9      	b.n	80035c4 <memset+0x4>

080035d0 <_init>:
 80035d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d2:	bf00      	nop
 80035d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d6:	bc08      	pop	{r3}
 80035d8:	469e      	mov	lr, r3
 80035da:	4770      	bx	lr

080035dc <_fini>:
 80035dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035de:	bf00      	nop
 80035e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035e2:	bc08      	pop	{r3}
 80035e4:	469e      	mov	lr, r3
 80035e6:	4770      	bx	lr
